(function(){var __webpack_modules__={5631:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2444);\n\n/* eslint-disable */\n(function (global, factory) {\n  (typeof exports === \'undefined\' ? \'undefined\' : (0,babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(exports)) === \'object\' && "object" !== \'undefined\' ? factory(exports, __webpack_require__(2081), __webpack_require__(9687)) : typeof define === \'function\' && __webpack_require__.amdO ? define([\'exports\', \'d3-selection\', \'d3-drag\'], factory) : factory(global.d3 = global.d3 || {}, global.d3, global.d3);\n})(window, function (exports, d3Selection, d3Drag) {\n  \'use strict\';\n\n  function createCommonjsModule(fn, module) {\n    return module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var __moduleExports$1 = createCommonjsModule(function (module) {\n    "use strict";\n\n    module.exports = twoProduct;\n\n    var SPLITTER = +(Math.pow(2, 27) + 1.0);\n\n    function twoProduct(a, b, result) {\n      var x = a * b;\n\n      var c = SPLITTER * a;\n      var abig = c - a;\n      var ahi = c - abig;\n      var alo = a - ahi;\n\n      var d = SPLITTER * b;\n      var bbig = d - b;\n      var bhi = d - bbig;\n      var blo = b - bhi;\n\n      var err1 = x - ahi * bhi;\n      var err2 = err1 - alo * bhi;\n      var err3 = err2 - ahi * blo;\n\n      var y = alo * blo - err3;\n\n      if (result) {\n        result[0] = y;\n        result[1] = x;\n        return result;\n      }\n\n      return [y, x];\n    }\n  });\n\n  var __moduleExports$2 = createCommonjsModule(function (module) {\n    "use strict";\n\n    module.exports = linearExpansionSum;\n\n    //Easy case: Add two scalars\n    function scalarScalar(a, b) {\n      var x = a + b;\n      var bv = x - a;\n      var av = x - bv;\n      var br = b - bv;\n      var ar = a - av;\n      var y = ar + br;\n      if (y) {\n        return [y, x];\n      }\n      return [x];\n    }\n\n    function linearExpansionSum(e, f) {\n      var ne = e.length | 0;\n      var nf = f.length | 0;\n      if (ne === 1 && nf === 1) {\n        return scalarScalar(e[0], f[0]);\n      }\n      var n = ne + nf;\n      var g = new Array(n);\n      var count = 0;\n      var eptr = 0;\n      var fptr = 0;\n      var abs = Math.abs;\n      var ei = e[eptr];\n      var ea = abs(ei);\n      var fi = f[fptr];\n      var fa = abs(fi);\n      var a, b;\n      if (ea < fa) {\n        b = ei;\n        eptr += 1;\n        if (eptr < ne) {\n          ei = e[eptr];\n          ea = abs(ei);\n        }\n      } else {\n        b = fi;\n        fptr += 1;\n        if (fptr < nf) {\n          fi = f[fptr];\n          fa = abs(fi);\n        }\n      }\n      if (eptr < ne && ea < fa || fptr >= nf) {\n        a = ei;\n        eptr += 1;\n        if (eptr < ne) {\n          ei = e[eptr];\n          ea = abs(ei);\n        }\n      } else {\n        a = fi;\n        fptr += 1;\n        if (fptr < nf) {\n          fi = f[fptr];\n          fa = abs(fi);\n        }\n      }\n      var x = a + b;\n      var bv = x - a;\n      var y = b - bv;\n      var q0 = y;\n      var q1 = x;\n      var _x, _bv, _av, _br, _ar;\n      while (eptr < ne && fptr < nf) {\n        if (ea < fa) {\n          a = ei;\n          eptr += 1;\n          if (eptr < ne) {\n            ei = e[eptr];\n            ea = abs(ei);\n          }\n        } else {\n          a = fi;\n          fptr += 1;\n          if (fptr < nf) {\n            fi = f[fptr];\n            fa = abs(fi);\n          }\n        }\n        b = q0;\n        x = a + b;\n        bv = x - a;\n        y = b - bv;\n        if (y) {\n          g[count++] = y;\n        }\n        _x = q1 + x;\n        _bv = _x - q1;\n        _av = _x - _bv;\n        _br = x - _bv;\n        _ar = q1 - _av;\n        q0 = _ar + _br;\n        q1 = _x;\n      }\n      while (eptr < ne) {\n        a = ei;\n        b = q0;\n        x = a + b;\n        bv = x - a;\n        y = b - bv;\n        if (y) {\n          g[count++] = y;\n        }\n        _x = q1 + x;\n        _bv = _x - q1;\n        _av = _x - _bv;\n        _br = x - _bv;\n        _ar = q1 - _av;\n        q0 = _ar + _br;\n        q1 = _x;\n        eptr += 1;\n        if (eptr < ne) {\n          ei = e[eptr];\n        }\n      }\n      while (fptr < nf) {\n        a = fi;\n        b = q0;\n        x = a + b;\n        bv = x - a;\n        y = b - bv;\n        if (y) {\n          g[count++] = y;\n        }\n        _x = q1 + x;\n        _bv = _x - q1;\n        _av = _x - _bv;\n        _br = x - _bv;\n        _ar = q1 - _av;\n        q0 = _ar + _br;\n        q1 = _x;\n        fptr += 1;\n        if (fptr < nf) {\n          fi = f[fptr];\n        }\n      }\n      if (q0) {\n        g[count++] = q0;\n      }\n      if (q1) {\n        g[count++] = q1;\n      }\n      if (!count) {\n        g[count++] = 0.0;\n      }\n      g.length = count;\n      return g;\n    }\n  });\n\n  var __moduleExports$4 = createCommonjsModule(function (module) {\n    "use strict";\n\n    module.exports = fastTwoSum;\n\n    function fastTwoSum(a, b, result) {\n      var x = a + b;\n      var bv = x - a;\n      var av = x - bv;\n      var br = b - bv;\n      var ar = a - av;\n      if (result) {\n        result[0] = ar + br;\n        result[1] = x;\n        return result;\n      }\n      return [ar + br, x];\n    }\n  });\n\n  var __moduleExports$3 = createCommonjsModule(function (module) {\n    "use strict";\n\n    var twoProduct = __moduleExports$1;\n    var twoSum = __moduleExports$4;\n\n    module.exports = scaleLinearExpansion;\n\n    function scaleLinearExpansion(e, scale) {\n      var n = e.length;\n      if (n === 1) {\n        var ts = twoProduct(e[0], scale);\n        if (ts[0]) {\n          return ts;\n        }\n        return [ts[1]];\n      }\n      var g = new Array(2 * n);\n      var q = [0.1, 0.1];\n      var t = [0.1, 0.1];\n      var count = 0;\n      twoProduct(e[0], scale, q);\n      if (q[0]) {\n        g[count++] = q[0];\n      }\n      for (var i = 1; i < n; ++i) {\n        twoProduct(e[i], scale, t);\n        var pq = q[1];\n        twoSum(pq, t[0], q);\n        if (q[0]) {\n          g[count++] = q[0];\n        }\n        var a = t[1];\n        var b = q[1];\n        var x = a + b;\n        var bv = x - a;\n        var y = b - bv;\n        q[1] = x;\n        if (y) {\n          g[count++] = y;\n        }\n      }\n      if (q[1]) {\n        g[count++] = q[1];\n      }\n      if (count === 0) {\n        g[count++] = 0.0;\n      }\n      g.length = count;\n      return g;\n    }\n  });\n\n  var __moduleExports$5 = createCommonjsModule(function (module) {\n    "use strict";\n\n    module.exports = robustSubtract;\n\n    //Easy case: Add two scalars\n    function scalarScalar(a, b) {\n      var x = a + b;\n      var bv = x - a;\n      var av = x - bv;\n      var br = b - bv;\n      var ar = a - av;\n      var y = ar + br;\n      if (y) {\n        return [y, x];\n      }\n      return [x];\n    }\n\n    function robustSubtract(e, f) {\n      var ne = e.length | 0;\n      var nf = f.length | 0;\n      if (ne === 1 && nf === 1) {\n        return scalarScalar(e[0], -f[0]);\n      }\n      var n = ne + nf;\n      var g = new Array(n);\n      var count = 0;\n      var eptr = 0;\n      var fptr = 0;\n      var abs = Math.abs;\n      var ei = e[eptr];\n      var ea = abs(ei);\n      var fi = -f[fptr];\n      var fa = abs(fi);\n      var a, b;\n      if (ea < fa) {\n        b = ei;\n        eptr += 1;\n        if (eptr < ne) {\n          ei = e[eptr];\n          ea = abs(ei);\n        }\n      } else {\n        b = fi;\n        fptr += 1;\n        if (fptr < nf) {\n          fi = -f[fptr];\n          fa = abs(fi);\n        }\n      }\n      if (eptr < ne && ea < fa || fptr >= nf) {\n        a = ei;\n        eptr += 1;\n        if (eptr < ne) {\n          ei = e[eptr];\n          ea = abs(ei);\n        }\n      } else {\n        a = fi;\n        fptr += 1;\n        if (fptr < nf) {\n          fi = -f[fptr];\n          fa = abs(fi);\n        }\n      }\n      var x = a + b;\n      var bv = x - a;\n      var y = b - bv;\n      var q0 = y;\n      var q1 = x;\n      var _x, _bv, _av, _br, _ar;\n      while (eptr < ne && fptr < nf) {\n        if (ea < fa) {\n          a = ei;\n          eptr += 1;\n          if (eptr < ne) {\n            ei = e[eptr];\n            ea = abs(ei);\n          }\n        } else {\n          a = fi;\n          fptr += 1;\n          if (fptr < nf) {\n            fi = -f[fptr];\n            fa = abs(fi);\n          }\n        }\n        b = q0;\n        x = a + b;\n        bv = x - a;\n        y = b - bv;\n        if (y) {\n          g[count++] = y;\n        }\n        _x = q1 + x;\n        _bv = _x - q1;\n        _av = _x - _bv;\n        _br = x - _bv;\n        _ar = q1 - _av;\n        q0 = _ar + _br;\n        q1 = _x;\n      }\n      while (eptr < ne) {\n        a = ei;\n        b = q0;\n        x = a + b;\n        bv = x - a;\n        y = b - bv;\n        if (y) {\n          g[count++] = y;\n        }\n        _x = q1 + x;\n        _bv = _x - q1;\n        _av = _x - _bv;\n        _br = x - _bv;\n        _ar = q1 - _av;\n        q0 = _ar + _br;\n        q1 = _x;\n        eptr += 1;\n        if (eptr < ne) {\n          ei = e[eptr];\n        }\n      }\n      while (fptr < nf) {\n        a = fi;\n        b = q0;\n        x = a + b;\n        bv = x - a;\n        y = b - bv;\n        if (y) {\n          g[count++] = y;\n        }\n        _x = q1 + x;\n        _bv = _x - q1;\n        _av = _x - _bv;\n        _br = x - _bv;\n        _ar = q1 - _av;\n        q0 = _ar + _br;\n        q1 = _x;\n        fptr += 1;\n        if (fptr < nf) {\n          fi = -f[fptr];\n        }\n      }\n      if (q0) {\n        g[count++] = q0;\n      }\n      if (q1) {\n        g[count++] = q1;\n      }\n      if (!count) {\n        g[count++] = 0.0;\n      }\n      g.length = count;\n      return g;\n    }\n  });\n\n  var __moduleExports = createCommonjsModule(function (module) {\n    "use strict";\n\n    var twoProduct = __moduleExports$1;\n    var robustSum = __moduleExports$2;\n    var robustScale = __moduleExports$3;\n    var robustSubtract = __moduleExports$5;\n\n    var NUM_EXPAND = 5;\n\n    var EPSILON = 1.1102230246251565e-16;\n    var ERRBOUND3 = (3.0 + 16.0 * EPSILON) * EPSILON;\n    var ERRBOUND4 = (7.0 + 56.0 * EPSILON) * EPSILON;\n\n    function cofactor(m, c) {\n      var result = new Array(m.length - 1);\n      for (var i = 1; i < m.length; ++i) {\n        var r = result[i - 1] = new Array(m.length - 1);\n        for (var j = 0, k = 0; j < m.length; ++j) {\n          if (j === c) {\n            continue;\n          }\n          r[k++] = m[i][j];\n        }\n      }\n      return result;\n    }\n\n    function matrix(n) {\n      var result = new Array(n);\n      for (var i = 0; i < n; ++i) {\n        result[i] = new Array(n);\n        for (var j = 0; j < n; ++j) {\n          result[i][j] = ["m", j, "[", n - i - 1, "]"].join("");\n        }\n      }\n      return result;\n    }\n\n    function sign(n) {\n      if (n & 1) {\n        return "-";\n      }\n      return "";\n    }\n\n    function generateSum(expr) {\n      if (expr.length === 1) {\n        return expr[0];\n      } else if (expr.length === 2) {\n        return ["sum(", expr[0], ",", expr[1], ")"].join("");\n      } else {\n        var m = expr.length >> 1;\n        return ["sum(", generateSum(expr.slice(0, m)), ",", generateSum(expr.slice(m)), ")"].join("");\n      }\n    }\n\n    function determinant(m) {\n      if (m.length === 2) {\n        return [["sum(prod(", m[0][0], ",", m[1][1], "),prod(-", m[0][1], ",", m[1][0], "))"].join("")];\n      } else {\n        var expr = [];\n        for (var i = 0; i < m.length; ++i) {\n          expr.push(["scale(", generateSum(determinant(cofactor(m, i))), ",", sign(i), m[0][i], ")"].join(""));\n        }\n        return expr;\n      }\n    }\n\n    function orientation(n) {\n      var pos = [];\n      var neg = [];\n      var m = matrix(n);\n      var args = [];\n      for (var i = 0; i < n; ++i) {\n        if ((i & 1) === 0) {\n          pos.push.apply(pos, determinant(cofactor(m, i)));\n        } else {\n          neg.push.apply(neg, determinant(cofactor(m, i)));\n        }\n        args.push("m" + i);\n      }\n      var posExpr = generateSum(pos);\n      var negExpr = generateSum(neg);\n      var funcName = "orientation" + n + "Exact";\n      var code = ["function ", funcName, "(", args.join(), "){var p=", posExpr, ",n=", negExpr, ",d=sub(p,n);\\\nreturn d[d.length-1];};return ", funcName].join("");\n      var proc = new Function("sum", "prod", "scale", "sub", code);\n      return proc(robustSum, twoProduct, robustScale, robustSubtract);\n    }\n\n    var orientation3Exact = orientation(3);\n    var orientation4Exact = orientation(4);\n\n    var CACHED = [function orientation0() {\n      return 0;\n    }, function orientation1() {\n      return 0;\n    }, function orientation2(a, b) {\n      return b[0] - a[0];\n    }, function orientation3(a, b, c) {\n      var l = (a[1] - c[1]) * (b[0] - c[0]);\n      var r = (a[0] - c[0]) * (b[1] - c[1]);\n      var det = l - r;\n      var s;\n      if (l > 0) {\n        if (r <= 0) {\n          return det;\n        } else {\n          s = l + r;\n        }\n      } else if (l < 0) {\n        if (r >= 0) {\n          return det;\n        } else {\n          s = -(l + r);\n        }\n      } else {\n        return det;\n      }\n      var tol = ERRBOUND3 * s;\n      if (det >= tol || det <= -tol) {\n        return det;\n      }\n      return orientation3Exact(a, b, c);\n    }, function orientation4(a, b, c, d) {\n      var adx = a[0] - d[0];\n      var bdx = b[0] - d[0];\n      var cdx = c[0] - d[0];\n      var ady = a[1] - d[1];\n      var bdy = b[1] - d[1];\n      var cdy = c[1] - d[1];\n      var adz = a[2] - d[2];\n      var bdz = b[2] - d[2];\n      var cdz = c[2] - d[2];\n      var bdxcdy = bdx * cdy;\n      var cdxbdy = cdx * bdy;\n      var cdxady = cdx * ady;\n      var adxcdy = adx * cdy;\n      var adxbdy = adx * bdy;\n      var bdxady = bdx * ady;\n      var det = adz * (bdxcdy - cdxbdy) + bdz * (cdxady - adxcdy) + cdz * (adxbdy - bdxady);\n      var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);\n      var tol = ERRBOUND4 * permanent;\n      if (det > tol || -det > tol) {\n        return det;\n      }\n      return orientation4Exact(a, b, c, d);\n    }];\n\n    function slowOrient(args) {\n      var proc = CACHED[args.length];\n      if (!proc) {\n        proc = CACHED[args.length] = orientation(args.length);\n      }\n      return proc.apply(undefined, args);\n    }\n\n    function generateOrientationProc() {\n      while (CACHED.length <= NUM_EXPAND) {\n        CACHED.push(orientation(CACHED.length));\n      }\n      var args = [];\n      var procArgs = ["slow"];\n      for (var i = 0; i <= NUM_EXPAND; ++i) {\n        args.push("a" + i);\n        procArgs.push("o" + i);\n      }\n      var code = ["function getOrientation(", args.join(), "){switch(arguments.length){case 0:case 1:return 0;"];\n      for (var i = 2; i <= NUM_EXPAND; ++i) {\n        code.push("case ", i, ":return o", i, "(", args.slice(0, i).join(), ");");\n      }\n      code.push("}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation");\n      procArgs.push(code.join(""));\n\n      var proc = Function.apply(undefined, procArgs);\n      module.exports = proc.apply(undefined, [slowOrient].concat(CACHED));\n      for (var i = 0; i <= NUM_EXPAND; ++i) {\n        module.exports[i] = CACHED[i];\n      }\n    }\n\n    generateOrientationProc();\n  });\n\n  var robustPnp = createCommonjsModule(function (module) {\n    module.exports = robustPointInPolygon;\n\n    var orient = __moduleExports;\n\n    function robustPointInPolygon(vs, point) {\n      var x = point[0];\n      var y = point[1];\n      var n = vs.length;\n      var inside = 1;\n      var lim = n;\n      for (var i = 0, j = n - 1; i < lim; j = i++) {\n        var a = vs[i];\n        var b = vs[j];\n        var yi = a[1];\n        var yj = b[1];\n        if (yj < yi) {\n          if (yj < y && y < yi) {\n            var s = orient(a, b, point);\n            if (s === 0) {\n              return 0;\n            } else {\n              inside ^= 0 < s | 0;\n            }\n          } else if (y === yi) {\n            var c = vs[(i + 1) % n];\n            var yk = c[1];\n            if (yi < yk) {\n              var s = orient(a, b, point);\n              if (s === 0) {\n                return 0;\n              } else {\n                inside ^= 0 < s | 0;\n              }\n            }\n          }\n        } else if (yi < yj) {\n          if (yi < y && y < yj) {\n            var s = orient(a, b, point);\n            if (s === 0) {\n              return 0;\n            } else {\n              inside ^= s < 0 | 0;\n            }\n          } else if (y === yi) {\n            var c = vs[(i + 1) % n];\n            var yk = c[1];\n            if (yk < yi) {\n              var s = orient(a, b, point);\n              if (s === 0) {\n                return 0;\n              } else {\n                inside ^= s < 0 | 0;\n              }\n            }\n          }\n        } else if (y === yi) {\n          var x0 = Math.min(a[0], b[0]);\n          var x1 = Math.max(a[0], b[0]);\n          if (i === 0) {\n            while (j > 0) {\n              var k = (j + n - 1) % n;\n              var p = vs[k];\n              if (p[1] !== y) {\n                break;\n              }\n              var px = p[0];\n              x0 = Math.min(x0, px);\n              x1 = Math.max(x1, px);\n              j = k;\n            }\n            if (j === 0) {\n              if (x0 <= x && x <= x1) {\n                return 0;\n              }\n              return 1;\n            }\n            lim = j + 1;\n          }\n          var y0 = vs[(j + n - 1) % n][1];\n          while (i + 1 < lim) {\n            var p = vs[i + 1];\n            if (p[1] !== y) {\n              break;\n            }\n            var px = p[0];\n            x0 = Math.min(x0, px);\n            x1 = Math.max(x1, px);\n            i += 1;\n          }\n          if (x0 <= x && x <= x1) {\n            return 0;\n          }\n          var y1 = vs[(i + 1) % n][1];\n          if (x < x0 && y0 < y !== y1 < y) {\n            inside ^= 1;\n          }\n        }\n      }\n      return 2 * inside - 1;\n    }\n  });\n\n  function lasso() {\n\n    var items = [],\n        closePathDistance = 75,\n        closePathSelect = true,\n        isPathClosed = false,\n        hoverSelect = true,\n        targetArea,\n        on = { start: function start() {}, draw: function draw() {}, end: function end() {} };\n\n    // Function to execute on call\n    function lasso(_this) {\n\n      // add a new group for the lasso\n      var g = _this.append("g").attr("class", "lasso");\n\n      // add the drawn path for the lasso\n      var dyn_path = g.append("path").attr("class", "drawn");\n\n      // add a closed path\n      var close_path = g.append("path").attr("class", "loop_close");\n\n      // add an origin node\n      var origin_node = g.append("circle").attr("class", "origin");\n\n      // The transformed lasso path for rendering\n      var tpath;\n\n      // The lasso origin for calculations\n      var origin;\n\n      // The transformed lasso origin for rendering\n      var torigin;\n\n      // Store off coordinates drawn\n      var drawnCoords;\n\n      // Apply drag behaviors\n      var drag = d3.drag().on("start", dragstart).on("drag", dragmove).on("end", dragend);\n\n      // Call drag\n      targetArea.call(drag);\n\n      function dragstart() {\n        // Init coordinates\n        drawnCoords = [];\n\n        // Initialize paths\n        tpath = "";\n        dyn_path.attr("d", null);\n        close_path.attr("d", null);\n\n        // Set every item to have a false selection and reset their center point and counters\n        items.nodes().forEach(function (e) {\n          e.__lasso.possible = false;\n          e.__lasso.selected = false;\n          e.__lasso.hoverSelect = false;\n          e.__lasso.loopSelect = false;\n\n          var box = e.getBoundingClientRect();\n          e.__lasso.lassoPoint = [Math.round(box.left + box.width / 2), Math.round(box.top + box.height / 2)];\n        });\n\n        // if hover is on, add hover function\n        if (hoverSelect) {\n          items.on("mouseover.lasso", function () {\n            // if hovered, change lasso selection attribute to true\n            this.__lasso.hoverSelect = true;\n          });\n        }\n\n        // Run user defined start function\n        on.start();\n      }\n\n      function dragmove(e) {\n        // Get mouse position within body, used for calculations\n        var x, y;\n        if (e.sourceEvent.type === "touchmove") {\n          x = e.sourceEvent.touches[0].clientX;\n          y = e.sourceEvent.touches[0].clientY;\n        } else {\n          x = e.sourceEvent.clientX;\n          y = e.sourceEvent.clientY;\n        }\n\n        // Get mouse position within drawing area, used for rendering\n        var tx = e.sourceEvent.offsetX;\n        var ty = e.sourceEvent.offsetY;\n\n        // Initialize the path or add the latest point to it\n        if (tpath === "") {\n          tpath = tpath + "M " + tx + " " + ty;\n          origin = [x, y];\n          torigin = [tx, ty];\n          // Draw origin node\n          origin_node.attr("cx", tx).attr("cy", ty).attr("r", 7).attr("display", null);\n        } else {\n          tpath = tpath + " L " + tx + " " + ty;\n        }\n\n        drawnCoords.push([x, y]);\n\n        // Calculate the current distance from the lasso origin\n        var distance = Math.sqrt(Math.pow(x - origin[0], 2) + Math.pow(y - origin[1], 2));\n\n        // Set the closed path line\n        var close_draw_path = "M " + tx + " " + ty + " L " + torigin[0] + " " + torigin[1];\n\n        // Draw the lines\n        dyn_path.attr("d", tpath);\n\n        close_path.attr("d", close_draw_path);\n\n        // Check if the path is closed\n        isPathClosed = distance <= closePathDistance ? true : false;\n\n        // If within the closed path distance parameter, show the closed path. otherwise, hide it\n        if (isPathClosed && closePathSelect) {\n          close_path.attr("display", null);\n        } else {\n          close_path.attr("display", "none");\n        }\n\n        items.nodes().forEach(function (n) {\n          n.__lasso.loopSelect = isPathClosed && closePathSelect ? robustPnp(drawnCoords, n.__lasso.lassoPoint) < 1 : false;\n          n.__lasso.possible = n.__lasso.hoverSelect || n.__lasso.loopSelect;\n        });\n\n        on.draw();\n      }\n\n      function dragend() {\n        // Remove mouseover tagging function\n        items.on("mouseover.lasso", null);\n\n        items.nodes().forEach(function (n) {\n          n.__lasso.selected = n.__lasso.possible;\n          n.__lasso.possible = false;\n        });\n\n        // Clear lasso\n        dyn_path.attr("d", null);\n        close_path.attr("d", null);\n        origin_node.attr("display", "none");\n\n        // Run user defined end function\n        on.end();\n      }\n    }\n\n    // Set or get list of items for lasso to select\n    lasso.items = function (_) {\n      if (!arguments.length) return items;\n      items = _;\n      var nodes = items.nodes();\n      nodes.forEach(function (n) {\n        n.__lasso = {\n          "possible": false,\n          "selected": false\n        };\n      });\n      return lasso;\n    };\n\n    // Return possible items\n    lasso.possibleItems = function () {\n      return items.filter(function () {\n        return this.__lasso.possible;\n      });\n    };\n\n    // Return selected items\n    lasso.selectedItems = function () {\n      return items.filter(function () {\n        return this.__lasso.selected;\n      });\n    };\n\n    // Return not possible items\n    lasso.notPossibleItems = function () {\n      return items.filter(function () {\n        return !this.__lasso.possible;\n      });\n    };\n\n    // Return not selected items\n    lasso.notSelectedItems = function () {\n      return items.filter(function () {\n        return !this.__lasso.selected;\n      });\n    };\n\n    // Distance required before path auto closes loop\n    lasso.closePathDistance = function (_) {\n      if (!arguments.length) return closePathDistance;\n      closePathDistance = _;\n      return lasso;\n    };\n\n    // Option to loop select or not\n    lasso.closePathSelect = function (_) {\n      if (!arguments.length) return closePathSelect;\n      closePathSelect = _ === true ? true : false;\n      return lasso;\n    };\n\n    // Not sure what this is for\n    lasso.isPathClosed = function (_) {\n      if (!arguments.length) return isPathClosed;\n      isPathClosed = _ === true ? true : false;\n      return lasso;\n    };\n\n    // Option to select on hover or not\n    lasso.hoverSelect = function (_) {\n      if (!arguments.length) return hoverSelect;\n      hoverSelect = _ === true ? true : false;\n      return lasso;\n    };\n\n    // Events\n    lasso.on = function (type, _) {\n      if (!arguments.length) return on;\n      if (arguments.length === 1) return on[type];\n      var types = ["start", "draw", "end"];\n      if (types.indexOf(type) > -1) {\n        on[type] = _;\n      }\n      return lasso;\n    };\n\n    // Area where lasso can be triggered from\n    lasso.targetArea = function (_) {\n      if (!arguments.length) return targetArea;\n      targetArea = _;\n      return lasso;\n    };\n\n    return lasso;\n  };\n\n  exports.lasso = lasso;\n\n  Object.defineProperty(exports, \'__esModule\', { value: true });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5631\n')},2344:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm.js\nvar vue_esm = __webpack_require__(538);\n;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=template&id=43e6d946&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('el-menu',{attrs:{\"mode\":\"horizontal\",\"background-color\":\"#545c64\",\"text-color\":\"#fff\",\"active-text-color\":\"#ffd04b\"}},[_c('li',{attrs:{\"id\":\"navi-title\"}},[_vm._v(\"GridLayout\")])]),_vm._v(\" \"),_c('svg',{attrs:{\"width\":\"0\",\"height\":\"0\"}},[_c('defs',{attrs:{\"id\":\"texture\"}},_vm._l((_vm.textures),function(texture,i){return _c('pattern',{key:i,domProps:{\"innerHTML\":_vm._s(texture)}})}),0)]),_vm._v(\" \"),_c('data-view')],1)}\nvar staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/extends.js\nvar helpers_extends = __webpack_require__(8239);\n// EXTERNAL MODULE: ./node_modules/element-ui/lib/theme-chalk/menu-item.css\nvar menu_item = __webpack_require__(14);\n// EXTERNAL MODULE: ./node_modules/element-ui/lib/theme-chalk/base.css\nvar base = __webpack_require__(8235);\n// EXTERNAL MODULE: ./node_modules/element-ui/lib/menu-item.js\nvar lib_menu_item = __webpack_require__(1119);\nvar lib_menu_item_default = /*#__PURE__*/__webpack_require__.n(lib_menu_item);\n// EXTERNAL MODULE: ./node_modules/element-ui/lib/theme-chalk/menu.css\nvar menu = __webpack_require__(7343);\n// EXTERNAL MODULE: ./node_modules/element-ui/lib/menu.js\nvar lib_menu = __webpack_require__(642);\nvar lib_menu_default = /*#__PURE__*/__webpack_require__.n(lib_menu);\n;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/DataView.vue?vue&type=template&id=393edb49&scoped=true&\nvar DataViewvue_type_template_id_393edb49_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"data-content\"}},[_c('gird-layout',{ref:\"grider\"}),_vm._v(\" \"),_c('legend-component')],1)}\nvar DataViewvue_type_template_id_393edb49_scoped_true_staticRenderFns = []\n\n\n;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/GridLayout.vue?vue&type=template&id=3ac8e62d&\nvar GridLayoutvue_type_template_id_3ac8e62d_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"grid-layout\"}},[_c('div',{attrs:{\"id\":\"grid-icons\"}},[_c('img',{staticClass:\"grid-icon\",attrs:{\"id\":\"grid-zoomin-icon\",\"src\":\"/static/images/zoomin.svg\"},on:{\"click\":_vm.initlasso}}),_vm._v(\" \"),_c('img',{staticClass:\"grid-icon\",attrs:{\"id\":\"grid-home-icon\",\"src\":\"/static/images/home.png\"},on:{\"click\":function($event){return _vm.zoomin()}}})]),_vm._v(\" \"),_c('svg',{ref:\"gridsvg\",attrs:{\"id\":\"grid-drawer\"}},[_c('g',{attrs:{\"id\":\"grid-main-g\",\"transform\":\"translate(0,0)\"}},[_c('g',{attrs:{\"id\":\"grid-g\"}}),_vm._v(\" \"),_c('g',{attrs:{\"id\":\"highlight-g\"}}),_vm._v(\" \"),_c('g',{attrs:{\"id\":\"lasso-g\"}})])]),_vm._v(\" \"),(_vm.rendering)?_c('waiting-icon'):_vm._e()],1)}\nvar GridLayoutvue_type_template_id_3ac8e62d_staticRenderFns = []\n\n\n// EXTERNAL MODULE: ./node_modules/babel-runtime/core-js/promise.js\nvar promise = __webpack_require__(6593);\nvar promise_default = /*#__PURE__*/__webpack_require__.n(promise);\n// EXTERNAL MODULE: ./node_modules/babel-runtime/regenerator/index.js\nvar regenerator = __webpack_require__(4942);\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n// EXTERNAL MODULE: ./node_modules/babel-runtime/helpers/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__(6803);\n// EXTERNAL MODULE: ./node_modules/babel-runtime/core-js/get-iterator.js\nvar get_iterator = __webpack_require__(6378);\nvar get_iterator_default = /*#__PURE__*/__webpack_require__.n(get_iterator);\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(629);\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar axios = __webpack_require__(9669);\nvar axios_default = /*#__PURE__*/__webpack_require__.n(axios);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 284 modules\nvar src = __webpack_require__(7083);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/Util.vue?vue&type=script&lang=js&\n\n/* harmony default export */ var Utilvue_type_script_lang_js_ = ({\n    name: 'Util',\n    methods: {\n        /**\n         * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n         *\n         * @param {String} text The text to be rendered.\n         * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n         *\n         * @return {int} text width(px)\n         *\n         * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n         */\n        getTextWidth: function getTextWidth(text, font) {\n            // re-use canvas object for better performance\n            var canvas = this.getTextWidth.canvas || (this.getTextWidth.canvas = document.createElement('canvas'));\n            var context = canvas.getContext('2d');\n            context.font = font;\n            var metrics = context.measureText(text);\n            return metrics.width;\n        },\n        toImage: function toImage(feature) {\n            // return array;\n            window.feature = feature;\n            var canvas = this.toImage.canvas || (this.toImage.canvas = document.createElement('canvas'));\n            var context = canvas.getContext('2d');\n            var height = feature.length;\n            var width = feature[0].length;\n            var depth = feature[0][0].length;\n            canvas.width = width;\n            canvas.height = height;\n            var image = context.createImageData(width, height);\n            var data = image.data;\n            if (depth == 1) {\n                for (var i = 0; i < data.length; i += 4) {\n                    var v = feature[Math.floor(i / 4 / width)][i / 4 % width];\n                    data[i] = v[0];\n                    data[i + 1] = v[0];\n                    data[i + 2] = v[0];\n                    data[i + 3] = 255;\n                }\n            } else {\n                for (var _i = 0; _i < data.length; _i += 4) {\n                    var _v = feature[Math.floor(_i / 4 / width)][_i / 4 % width];\n                    data[_i] = _v[0];\n                    data[_i + 1] = _v[1];\n                    data[_i + 2] = _v[2];\n                    data[_i + 3] = 255;\n                }\n            }\n            context.putImageData(image, 0, 0);\n            return canvas.toDataURL();\n        }\n    }\n});\n;// CONCATENATED MODULE: ./src/components/Util.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_Utilvue_type_script_lang_js_ = (Utilvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./src/components/Util.vue\nvar Util_render, Util_staticRenderFns\n;\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  components_Utilvue_type_script_lang_js_,\n  Util_render,\n  Util_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var Util = (component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/GlovalVar.vue?vue&type=script&lang=js&\n\n/* harmony default export */ var GlovalVarvue_type_script_lang_js_ = ({\n    data: function data() {\n        return {\n            // transition duration\n            createDuration: 500,\n            updateDuration: 500,\n            transformDuration: 500,\n            removeDuration: 500,\n            delay: 100\n        };\n    }\n});\n;// CONCATENATED MODULE: ./src/components/GlovalVar.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_GlovalVarvue_type_script_lang_js_ = (GlovalVarvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./src/components/GlovalVar.vue\nvar GlovalVar_render, GlovalVar_staticRenderFns\n;\n\n\n\n/* normalize component */\n;\nvar GlovalVar_component = (0,componentNormalizer/* default */.Z)(\n  components_GlovalVarvue_type_script_lang_js_,\n  GlovalVar_render,\n  GlovalVar_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var GlovalVar = (GlovalVar_component.exports);\n;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/WaitingIcon.vue?vue&type=template&id=12fc096b&\nvar WaitingIconvue_type_template_id_12fc096b_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar WaitingIconvue_type_template_id_12fc096b_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"waiting-div\"},[_c('img',{staticClass:\"rotating\",attrs:{\"src\":\"/static/images/refresh.png\"}})])}]\n\n\n;// CONCATENATED MODULE: ./src/components/WaitingIcon.vue?vue&type=template&id=12fc096b&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/WaitingIcon.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ var WaitingIconvue_type_script_lang_js_ = ({\n    name: 'waiting-icon'\n});\n;// CONCATENATED MODULE: ./src/components/WaitingIcon.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_WaitingIconvue_type_script_lang_js_ = (WaitingIconvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-style-loader/index.js!./node_modules/css-loader/index.js??clonedRuleSet-6[0].rules[0].use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/lib/index.js??clonedRuleSet-6[0].rules[0].use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/WaitingIcon.vue?vue&type=style&index=0&lang=css&\nvar WaitingIconvue_type_style_index_0_lang_css_ = __webpack_require__(4479);\n;// CONCATENATED MODULE: ./src/components/WaitingIcon.vue?vue&type=style&index=0&lang=css&\n /* harmony default export */ var components_WaitingIconvue_type_style_index_0_lang_css_ = ((/* unused pure expression or super */ null && (mod))); \n;// CONCATENATED MODULE: ./src/components/WaitingIcon.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar WaitingIcon_component = (0,componentNormalizer/* default */.Z)(\n  components_WaitingIconvue_type_script_lang_js_,\n  WaitingIconvue_type_template_id_12fc096b_render,\n  WaitingIconvue_type_template_id_12fc096b_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var WaitingIcon = (WaitingIcon_component.exports);\n// EXTERNAL MODULE: ./node_modules/lodash.clonedeep/index.js\nvar lodash_clonedeep = __webpack_require__(3465);\nvar lodash_clonedeep_default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep);\n// EXTERNAL MODULE: ./node_modules/priorityqueue/lib/esm/index.js + 3 modules\nvar esm = __webpack_require__(2670);\n// EXTERNAL MODULE: ./node_modules/@popperjs/core/lib/popper.js + 51 modules\nvar popper = __webpack_require__(7211);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/GridLayout.vue?vue&type=script&lang=js&\n\n\n\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nwindow.d3 = src;\n__webpack_require__(5631);\n\n\n\n\n\n\n\n/* harmony default export */ var GridLayoutvue_type_script_lang_js_ = ({\n    name: 'GridLayout',\n    components: { WaitingIcon: WaitingIcon },\n    mixins: [Util, GlovalVar],\n    computed: (0,helpers_extends/* default */.Z)({}, (0,vuex_esm/* mapGetters */.Se)(['labelHierarchy', 'labelnames', 'URL_GET_GRID', 'hierarchyColors', 'colors']), {\n        svg: function svg() {\n            return src.select('#grid-drawer');\n        },\n        mainG: function mainG() {\n            return this.svg.select('#grid-main-g');\n        },\n        girdG: function girdG() {\n            return this.mainG.select('#grid-g');\n        },\n        lassoG: function lassoG() {\n            return this.mainG.select('#lasso-g');\n        },\n        svgWidth: function svgWidth() {\n            return this.gridCellAttrs['size'] * this.gridInfo['width'];\n        },\n        nodesDict: function nodesDict() {\n            var nodesDict = {};\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = get_iterator_default()(this.nodes), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var node = _step.value;\n\n                    nodesDict[node.index] = node;\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return nodesDict;\n        },\n        lasso: function lasso() {\n            return window.d3.lasso;\n        },\n        highlightG: function highlightG() {\n            return this.mainG.select('#highlight-g');\n        }\n    }),\n    watch: {\n        // all info was loaded\n        labelnames: function labelnames(newColors, oldColors) {\n            if (!this.rendering && this.nodes.length > 0) {\n                this.render();\n            }\n        }\n    },\n    data: function data() {\n        return {\n            nodes: [],\n            showImageNodesMax: 1600,\n            showImageNodes: [],\n            depth: 0,\n            gridInfo: {},\n            rendering: false,\n\n            //\n            gridCellsInG: undefined,\n            lassoNodesInG: undefined,\n\n            //\n            gridCellAttrs: {\n                'gClass': 'grid-cell-in-g',\n                'size': 60,\n                'stroke-width': 0,\n                'stroke': 'gray',\n                'rectOpacity': 1,\n                'centerR': 3,\n                'centerClass': 'lasso-node',\n                'centerClassNotSelect': 'lasso-not-possible',\n                'centerClassSelect': 'lasso-possible',\n                'imageMargin': 4\n            },\n\n            tooltipClass: 'cell-tooltip'\n        };\n    },\n    methods: {\n        zoomin: function zoomin(nodes) {\n            var _this = this;\n\n            this.rendering = true;\n            if (nodes === undefined) {\n                // zoom home\n                nodes = this.nodes;\n                this.depth = 0;\n            }\n            if (nodes.length > 0 && typeof nodes[0] !== 'number') {\n                nodes = nodes.map(function (d) {\n                    return d.index;\n                });\n            }\n            var that = this;\n            var tsnes = nodes.map(function (d) {\n                return _this.nodesDict[d].tsne;\n            });\n            axios_default().post(this.URL_GET_GRID, {\n                nodes: nodes,\n                depth: this.depth,\n                constraints: tsnes\n            }).then(function (response) {\n                that.nodes = response.data.nodes;\n                that.depth = response.data.depth;\n                that.gridInfo = response.data.grid;\n                that.render();\n            });\n        },\n        render: function () {\n            var _ref = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee() {\n                var i;\n                return regenerator_default().wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                // sort nodes and find most unconfident nodes\n                                this.nodes.sort(function (a, b) {\n                                    return a.confidence - b.confidence;\n                                });\n                                for (i = 0; i < Math.min(this.showImageNodesMax, this.nodes.length); i++) {\n                                    this.nodes[i].showImage = true;\n                                }\n                                // set color\n                                this.setLabelColor(this.labelHierarchy, this.colors, this.nodes, this.labelnames);\n\n                                this.gridCellsInG = this.girdG.selectAll('.' + this.gridCellAttrs['gClass']).data(this.nodes, function (d) {\n                                    return d.index;\n                                });\n                                this.lassoNodesInG = this.lassoG.selectAll('.' + this.gridCellAttrs['centerClass']).data(this.nodes, function (d) {\n                                    return d.index;\n                                });\n\n                                _context.next = 7;\n                                return this.remove();\n\n                            case 7:\n                                this.transform();\n                                _context.next = 10;\n                                return this.update();\n\n                            case 10:\n                                _context.next = 12;\n                                return this.create();\n\n                            case 12:\n\n                                this.gridCellsInG = this.girdG.selectAll('.' + this.gridCellAttrs['gClass']);\n                                this.lassoNodesInG = this.lassoG.selectAll('.' + this.gridCellAttrs['centerClass']);\n                                this.rendering = false;\n\n                            case 15:\n                            case 'end':\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this);\n            }));\n\n            function render() {\n                return _ref.apply(this, arguments);\n            }\n\n            return render;\n        }(),\n        create: function () {\n            var _ref2 = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee2() {\n                var that;\n                return regenerator_default().wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                that = this;\n                                return _context2.abrupt('return', new (promise_default())(function (resolve, reject) {\n                                    var gridCellsInG = that.gridCellsInG.enter().append('g').attr('class', that.gridCellAttrs['gClass']).attr('opacity', 0).attr('transform', function (d) {\n                                        return 'translate(' + d.grid % that.gridInfo.width * that.gridCellAttrs['size'] + ',\\n                        ' + Math.floor(d.grid / that.gridInfo.width) * that.gridCellAttrs['size'] + ')';\n                                    }).on('mouseenter', function (e, d) {\n                                        // eslint-disable-next-line no-invalid-this\n                                        var node = src.select(this).node();\n                                        that.createTooltip(d).then(function (tooltip) {\n                                            (0,popper/* createPopper */.fi)(node, tooltip, {\n                                                modifiers: [{\n                                                    name: 'offset',\n                                                    options: {\n                                                        offset: [0, 8]\n                                                    }\n                                                }]\n                                            });\n                                        });\n                                    }).on('mouseleave', function () {\n                                        that.removeTooltip();\n                                    });\n\n                                    gridCellsInG.transition().duration(that.createDuration).attr('opacity', 1).on('end', resolve);\n\n                                    gridCellsInG.append('rect').attr('x', 0).attr('y', 0).attr('width', that.gridCellAttrs['size']).attr('height', that.gridCellAttrs['size']).attr('stroke', that.gridCellAttrs['stroke']).attr('stroke-width', that.gridCellAttrs['stroke-width']).attr('fill', function (d) {\n                                        return that.hierarchyColors[that.labelnames[d.pred]].fill;\n                                    }).attr('opacity', function (d) {\n                                        return that.hierarchyColors[that.labelnames[d.pred]].opacity;\n                                    });\n\n                                    gridCellsInG.filter(function (d) {\n                                        return d.showImage;\n                                    }).append('image').attr('x', that.gridCellAttrs['imageMargin']).attr('y', that.gridCellAttrs['imageMargin']).attr('width', that.gridCellAttrs['size'] - 2 * that.gridCellAttrs['imageMargin']).attr('height', that.gridCellAttrs['size'] - 2 * that.gridCellAttrs['imageMargin']).attr('href', '').each(function (node) {\n                                        var getImageGradientURL = that.$store.getters.URL_GET_IMAGE_GRADIENT;\n                                        // eslint-disable-next-line no-invalid-this\n                                        var img = src.select(this);\n                                        axios_default().get(getImageGradientURL(node.index, 'origin')).then(function (response) {\n                                            img.attr('href', that.toImage(response.data));\n                                        });\n                                    });\n\n                                    that.lassoNodesInG.enter().append('circle').attr('class', that.gridCellAttrs['centerClass']).attr('r', that.gridCellAttrs['centerR']).attr('cx', function (d) {\n                                        return that.gridCellAttrs['size'] / 2 + d.grid % that.gridInfo.width * that.gridCellAttrs['size'];\n                                    }).attr('cy', function (d) {\n                                        return that.gridCellAttrs['size'] / 2 + Math.floor(d.grid / that.gridInfo.width) * that.gridCellAttrs['size'];\n                                    });\n\n                                    if (that.gridCellsInG.enter().size() === 0 && that.lassoNodesInG.enter().size() === 0) {\n                                        resolve();\n                                    }\n                                }));\n\n                            case 2:\n                            case 'end':\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function create() {\n                return _ref2.apply(this, arguments);\n            }\n\n            return create;\n        }(),\n        update: function () {\n            var _ref3 = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee3() {\n                var that;\n                return regenerator_default().wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                that = this;\n                                return _context3.abrupt('return', new (promise_default())(function (resolve, reject) {\n                                    that.gridCellsInG.transition().duration(that.updateDuration).attr('transform', function (d) {\n                                        return 'translate(' + d.grid % that.gridInfo.width * that.gridCellAttrs['size'] + ',\\n                        ' + Math.floor(d.grid / that.gridInfo.width) * that.gridCellAttrs['size'] + ')';\n                                    }).on('end', resolve);\n\n                                    that.gridCellsInG.selectAll('rect').transition().duration(that.updateDuration).attr('fill', function (d) {\n                                        return that.hierarchyColors[that.labelnames[d.pred]].fill;\n                                    }).attr('opacity', function (d) {\n                                        return that.hierarchyColors[that.labelnames[d.pred]].opacity;\n                                    }).on('end', resolve);\n\n                                    that.lassoNodesInG.attr('cx', function (d) {\n                                        return that.gridCellAttrs['size'] / 2 + d.grid % that.gridInfo.width * that.gridCellAttrs['size'];\n                                    }).attr('cy', function (d) {\n                                        return that.gridCellAttrs['size'] / 2 + Math.floor(d.grid / that.gridInfo.width) * that.gridCellAttrs['size'];\n                                    });\n\n                                    if (that.gridCellsInG.size() === 0 && that.lassoNodesInG.size() === 0) {\n                                        resolve();\n                                    }\n                                }));\n\n                            case 2:\n                            case 'end':\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this);\n            }));\n\n            function update() {\n                return _ref3.apply(this, arguments);\n            }\n\n            return update;\n        }(),\n        remove: function () {\n            var _ref4 = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee4() {\n                var that;\n                return regenerator_default().wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                that = this;\n                                return _context4.abrupt('return', new (promise_default())(function (resolve, reject) {\n                                    that.gridCellsInG.exit().transition().duration(that.removeDuration).attr('opacity', 0).remove().on('end', resolve);\n\n                                    that.lassoNodesInG.exit().transition().duration(that.removeDuration).attr('opacity', 0).remove().on('end', resolve);\n\n                                    if (that.gridCellsInG.exit().size() === 0 && that.lassoNodesInG.exit().size() === 0) {\n                                        resolve();\n                                    }\n                                }));\n\n                            case 2:\n                            case 'end':\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function remove() {\n                return _ref4.apply(this, arguments);\n            }\n\n            return remove;\n        }(),\n        transform: function () {\n            var _ref5 = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee5() {\n                var that;\n                return regenerator_default().wrap(function _callee5$(_context5) {\n                    while (1) {\n                        switch (_context5.prev = _context5.next) {\n                            case 0:\n                                that = this;\n                                return _context5.abrupt('return', new (promise_default())(function (resolve, reject) {\n                                    // compute transform\n                                    var svgRealWidth = that.$refs.gridsvg.clientWidth;\n                                    var svgRealHeight = that.$refs.gridsvg.clientHeight;\n                                    var realSize = Math.min(svgRealWidth, svgRealHeight);\n                                    var shiftx = 0;\n                                    var shifty = 0;\n                                    var scale = 1;\n                                    if (that.svgWidth > realSize) {\n                                        scale = realSize / that.svgWidth;\n                                    } else {\n                                        scale = 1;\n                                    }\n                                    shiftx = (svgRealWidth - scale * that.svgWidth) / 2;\n                                    shifty = (svgRealHeight - scale * that.svgWidth) / 2;\n                                    that.mainG.transition().duration(that.transformDuration).attr('transform', 'translate(' + shiftx + ' ' + shifty + ') scale(' + scale + ')').on('end', resolve);\n                                }));\n\n                            case 2:\n                            case 'end':\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, this);\n            }));\n\n            function transform() {\n                return _ref5.apply(this, arguments);\n            }\n\n            return transform;\n        }(),\n        initlasso: function initlasso() {\n            // Lasso functions\n            var that = this;\n            var lassoStart = function lassoStart() {\n                lasso.items().classed('lasso-not-possible', true).classed('lasso-possible', false);\n            };\n\n            var lassoDraw = function lassoDraw() {\n                // Style the possible dots\n                lasso.possibleItems().classed('lasso-not-possible', false).classed('lasso-possible', true);\n\n                // Style the not possible dot\n                lasso.notPossibleItems().classed('lasso-not-possible', true).classed('lasso-possible', false);\n            };\n\n            var lassoEnd = function lassoEnd() {\n                // Reset the color of all dots\n                lasso.items().classed('lasso-not-possible', false).classed('lasso-possible', false);\n                var selectednodes = lasso.selectedItems().data();\n                if (selectednodes.length > 0) {\n                    that.zoomin(selectednodes);\n                }\n                that.stoplasso();\n            };\n\n            var lasso = window.d3.lasso().closePathSelect(true).closePathDistance(100).items(this.lassoNodesInG).targetArea(this.svg).on('start', lassoStart).on('draw', lassoDraw).on('end', lassoEnd);\n\n            this.svg.call(lasso);\n        },\n        stoplasso: function stoplasso() {\n            this.svg.select('.lasso').remove();\n            this.svg.on('.drag', null);\n        },\n        setLabelColor: function setLabelColor(labelHierarchy, colors, nodes, labelnames) {\n            var hierarchy = lodash_clonedeep_default()(labelHierarchy);\n            var root = {\n                name: '',\n                children: hierarchy\n            };\n            // count samples in each class\n            var counts = {};\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = get_iterator_default()(nodes), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var _node = _step2.value;\n\n                    if (counts[labelnames[_node.pred]] === undefined) {\n                        counts[labelnames[_node.pred]] = 0;\n                    }\n                    counts[labelnames[_node.pred]]++;\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            var dfsCount = function dfsCount(root, counts) {\n                if (typeof root === 'string') {\n                    if (counts[root] === undefined) {\n                        counts[root] = 0;\n                    }\n                    return {\n                        name: root,\n                        count: counts[root],\n                        children: [],\n                        realChildren: [],\n                        emptyChildren: []\n                    };\n                } else {\n                    var count = 0;\n                    var realChildren = [];\n                    var emptyChildren = [];\n                    for (var i = 0; i < root.children.length; i++) {\n                        root.children[i] = dfsCount(root.children[i], counts);\n                        count += root.children[i].count;\n                        if (root.children[i].count !== 0) {\n                            realChildren.push(root.children[i]);\n                        } else {\n                            emptyChildren.push(root.children[i]);\n                        }\n                    }\n                    // filter out empty nodes\n                    root.realChildren = realChildren;\n                    root.emptyChildren = emptyChildren;\n                    counts[root.name] = count;\n                    root.count = count;\n                    return root;\n                }\n            };\n            dfsCount(root, counts);\n            // set hierarchy color\n            var pq = new esm/* default */.ZP({\n                'comparator': function comparator(a, b) {\n                    return a.count > b.count ? 1 : a.count < b.count ? -1 : 0;\n                }\n            });\n            pq.push(root);\n            var classThreshold = 10;\n            var countThreshold = 0.5;\n            var showNodes = {};\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = get_iterator_default()(root.children), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var topnode = _step3.value;\n\n                    showNodes[topnode.name] = colors[topnode.name];\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            while (top.length > 0) {\n                var _top = pq.top();\n                if (pq.length - 1 + _top.realChildren.length <= classThreshold || _top.count / root.count >= countThreshold) {\n                    pq.pop();\n                    showNodes[_top.name] = colors[_top.name];\n                    var _iteratorNormalCompletion4 = true;\n                    var _didIteratorError4 = false;\n                    var _iteratorError4 = undefined;\n\n                    try {\n                        for (var _iterator4 = get_iterator_default()(_top.realChildren), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                            var child = _step4.value;\n\n                            pq.push(child);\n                        }\n                    } catch (err) {\n                        _didIteratorError4 = true;\n                        _iteratorError4 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                _iterator4.return();\n                            }\n                        } finally {\n                            if (_didIteratorError4) {\n                                throw _iteratorError4;\n                            }\n                        }\n                    }\n                } else {\n                    var _iteratorNormalCompletion5 = true;\n                    var _didIteratorError5 = false;\n                    var _iteratorError5 = undefined;\n\n                    try {\n                        for (var _iterator5 = get_iterator_default()(pq.toArray()), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                            var node = _step5.value;\n\n                            showNodes[node.name] = colors[node.name];\n                        }\n                    } catch (err) {\n                        _didIteratorError5 = true;\n                        _iteratorError5 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                                _iterator5.return();\n                            }\n                        } finally {\n                            if (_didIteratorError5) {\n                                throw _iteratorError5;\n                            }\n                        }\n                    }\n\n                    break;\n                }\n            }\n            var hierarchyColors = {};\n            var dfsSetColor = function dfsSetColor(root, showNodes, hierarchyColors, baseColor) {\n                if (showNodes[root.name] !== undefined) {\n                    baseColor = showNodes[root.name];\n                }\n                hierarchyColors[root.name] = baseColor;\n                var _iteratorNormalCompletion6 = true;\n                var _didIteratorError6 = false;\n                var _iteratorError6 = undefined;\n\n                try {\n                    for (var _iterator6 = get_iterator_default()(root.children), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                        var _child = _step6.value;\n\n                        dfsSetColor(_child, showNodes, hierarchyColors, baseColor);\n                    }\n                } catch (err) {\n                    _didIteratorError6 = true;\n                    _iteratorError6 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                            _iterator6.return();\n                        }\n                    } finally {\n                        if (_didIteratorError6) {\n                            throw _iteratorError6;\n                        }\n                    }\n                }\n            };\n            dfsSetColor(root, showNodes, hierarchyColors);\n            this.$store.commit('setHierarchyColors', hierarchyColors);\n        },\n        createTooltip: function createTooltip(node) {\n            var that = this;\n            var getImageGradientURL = this.$store.getters.URL_GET_IMAGE_GRADIENT;\n            var tooltip = src.select('#grid-layout').append('div').attr('class', that.tooltipClass).style('display', 'none');\n            return axios_default().get(getImageGradientURL(node.index, 'origin')).then(function (response) {\n                tooltip.style('display', 'flex');\n                tooltip.html('<div class=\"grid-tooltip-info\">ID: ' + node.index + '</div>\\n                        <div>' + that.labelnames[node.label] + ' -> ' + that.labelnames[node.pred] + '</div>\\n                        <div>confidence: ' + Math.round(node.confidence * 100000) / 100000 + '</div>\\n                    <img class=\"gird-tooltip-image\" src=\"' + that.toImage(response.data) + '\"/>\\n                    <div id=\"grid-tooltip-arrow\" data-popper-arrow></div>');\n                return tooltip.node();\n            });\n        },\n        removeTooltip: function removeTooltip() {\n            src.selectAll('.' + this.tooltipClass).remove();\n        }\n    },\n    mounted: function mounted() {\n        var that = this;\n        axios_default().post(that.URL_GET_GRID, {\n            nodes: [],\n            depth: 0\n        }).then(function (response) {\n            that.nodes = response.data.nodes;\n            that.depth = response.data.depth;\n            that.gridInfo = response.data.grid;\n            if (!that.rendering && that.labelnames.length > 0) {\n                that.rendering = true;\n                that.render();\n            }\n        });\n    }\n});\n;// CONCATENATED MODULE: ./src/components/GridLayout.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_GridLayoutvue_type_script_lang_js_ = (GridLayoutvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-style-loader/index.js!./node_modules/css-loader/index.js??clonedRuleSet-6[0].rules[0].use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/lib/index.js??clonedRuleSet-6[0].rules[0].use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/GridLayout.vue?vue&type=style&index=0&lang=css&\nvar GridLayoutvue_type_style_index_0_lang_css_ = __webpack_require__(202);\n;// CONCATENATED MODULE: ./src/components/GridLayout.vue?vue&type=style&index=0&lang=css&\n /* harmony default export */ var components_GridLayoutvue_type_style_index_0_lang_css_ = ((/* unused pure expression or super */ null && (mod))); \n;// CONCATENATED MODULE: ./src/components/GridLayout.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar GridLayout_component = (0,componentNormalizer/* default */.Z)(\n  components_GridLayoutvue_type_script_lang_js_,\n  GridLayoutvue_type_template_id_3ac8e62d_render,\n  GridLayoutvue_type_template_id_3ac8e62d_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var GridLayout = (GridLayout_component.exports);\n;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/Legend.vue?vue&type=template&id=6805c40e&\nvar Legendvue_type_template_id_6805c40e_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('svg',{attrs:{\"id\":\"legend-drawer\"}},[_c('g',{attrs:{\"id\":\"legend-g\"}})])}\nvar Legendvue_type_template_id_6805c40e_staticRenderFns = []\n\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/Legend.vue?vue&type=script&lang=js&\n\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var Legendvue_type_script_lang_js_ = ({\n    name: 'legend',\n    computed: (0,helpers_extends/* default */.Z)({}, (0,vuex_esm/* mapGetters */.Se)(['hierarchyColors', 'labelnames']), {\n        legendG: function legendG() {\n            return src.select('#legend-drawer').select('#legend-g');\n        }\n    }),\n    data: function data() {\n        return {\n            legendsInG: undefined\n        };\n    },\n    watch: {\n        // all info was loaded\n        hierarchyColors: function hierarchyColors(newColors, oldColors) {\n            this.render();\n        }\n    },\n    methods: {\n        render: function render() {\n            var _this = this;\n\n            this.legendsInG = this.legendG.selectAll('.legend-row').data(this.labelnames, function (d) {\n                return d;\n            });\n            var legendsInG = this.legendsInG.enter().append('g').attr('class', 'legend-row').attr('transform', function (d, i) {\n                return 'translate(10, ' + (i * 25 + 100) + ')';\n            });\n            legendsInG.append('rect').attr('x', 0).attr('y', 0).attr('width', 18).attr('height', 18).attr('stroke-width', 0).attr('fill', function (d) {\n                return _this.hierarchyColors[d].fill;\n            }).attr('opacity', function (d) {\n                return _this.hierarchyColors[d].opacity;\n            });\n\n            legendsInG.append('text').attr('x', 25).attr('y', 15).attr('font-size', 15).attr('font-weight', 'bold').attr('color', 'gray').text(function (d) {\n                return d;\n            });\n        }\n    }\n});\n;// CONCATENATED MODULE: ./src/components/Legend.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_Legendvue_type_script_lang_js_ = (Legendvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./src/components/Legend.vue\n\n\n\n\n\n/* normalize component */\n;\nvar Legend_component = (0,componentNormalizer/* default */.Z)(\n  components_Legendvue_type_script_lang_js_,\n  Legendvue_type_template_id_6805c40e_render,\n  Legendvue_type_template_id_6805c40e_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var Legend = (Legend_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/DataView.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var DataViewvue_type_script_lang_js_ = ({\n    components: { GirdLayout: GridLayout, LegendComponent: Legend },\n    name: 'DataView',\n    data: function data() {\n        return {\n            hoveredNode: []\n        };\n    },\n\n    methods: {}\n});\n;// CONCATENATED MODULE: ./src/components/DataView.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_DataViewvue_type_script_lang_js_ = (DataViewvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-style-loader/index.js!./node_modules/css-loader/index.js??clonedRuleSet-6[0].rules[0].use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/lib/index.js??clonedRuleSet-6[0].rules[0].use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/DataView.vue?vue&type=style&index=0&id=393edb49&scoped=true&lang=css&\nvar DataViewvue_type_style_index_0_id_393edb49_scoped_true_lang_css_ = __webpack_require__(998);\n;// CONCATENATED MODULE: ./src/components/DataView.vue?vue&type=style&index=0&id=393edb49&scoped=true&lang=css&\n /* harmony default export */ var components_DataViewvue_type_style_index_0_id_393edb49_scoped_true_lang_css_ = ((/* unused pure expression or super */ null && (mod))); \n;// CONCATENATED MODULE: ./src/components/DataView.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar DataView_component = (0,componentNormalizer/* default */.Z)(\n  components_DataViewvue_type_script_lang_js_,\n  DataViewvue_type_template_id_393edb49_scoped_true_render,\n  DataViewvue_type_template_id_393edb49_scoped_true_staticRenderFns,\n  false,\n  null,\n  \"393edb49\",\n  null\n  \n)\n\n/* harmony default export */ var DataView = (DataView_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable max-len */\n\n\n\n\n\nvue_esm.default.use((lib_menu_default()));\nvue_esm.default.use((lib_menu_item_default()));\n\n// main vue component\n/* harmony default export */ var Appvue_type_script_lang_js_ = ({\n    name: 'App',\n    components: { DataView: DataView },\n    data: function data() {\n        return {\n            textures: [],\n            colorsscope: { 'hue_scope': [0, 360], 'lumi_scope': [35, 95] }\n        };\n    },\n    mounted: function mounted() {\n        var store = this.$store;\n        var that = this;\n        axios_default().get(store.getters.URL_GET_ALL_DATA).then(function (response) {\n            store.commit('setAllData', response.data);\n            console.log('network data', store.getters.network);\n        });\n        axios_default().post(store.getters.URL_GET_LABEL_HIERARCHY).then(function (response) {\n            var matrix = response.data;\n            var colors = that.initColor(matrix.hierarchy);\n            store.commit('setColors', colors);\n            // init hierarchy colors\n            var hierarchyColors = (0,helpers_extends/* default */.Z)({}, colors);\n            store.commit('setHierarchyColors', hierarchyColors);\n            // save label hierarchy data\n            store.commit('setLabelHierarchy', matrix);\n            console.log('label hierarchy data', matrix);\n        });\n    },\n    methods: {\n        initColor: function initColor(hierarchy) {\n            var basecolors = ['#8dd3c7', '#fee789', '#fe614f', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#bc80bd', '#ccebc5', '#ffed6f'];\n            // 1:ffffb3  2:fb8072\n            var colors = {}; // fill and opacity\n\n            for (var i = 0; i < hierarchy.length; i++) {\n                colors[hierarchy[i].name] = {\n                    fill: basecolors[i],\n                    opacity: 1\n                };\n            }\n            return colors;\n        },\n        rgb2hex: function rgb2hex(rgb) {\n            return '#' + (1 << 24 | rgb.r << 16 | rgb.g << 8 | rgb.b).toString(16).substring(1);\n        }\n    }\n});\n;// CONCATENATED MODULE: ./src/App.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_Appvue_type_script_lang_js_ = (Appvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-style-loader/index.js!./node_modules/css-loader/index.js??clonedRuleSet-6[0].rules[0].use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/lib/index.js??clonedRuleSet-6[0].rules[0].use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=css&\nvar Appvue_type_style_index_0_lang_css_ = __webpack_require__(136);\n;// CONCATENATED MODULE: ./src/App.vue?vue&type=style&index=0&lang=css&\n /* harmony default export */ var src_Appvue_type_style_index_0_lang_css_ = ((/* unused pure expression or super */ null && (mod))); \n;// CONCATENATED MODULE: ./src/App.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar App_component = (0,componentNormalizer/* default */.Z)(\n  src_Appvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var App = (App_component.exports);\n;// CONCATENATED MODULE: ./src/store/store.js\n\n\nvue_esm.default.use(vuex_esm/* default */.ZP);\n\n/* harmony default export */ var store = (new vuex_esm/* default.Store */.ZP.Store({\n    state: {\n        APIBASE: '//localhost:5005',\n        network: {},\n        statistic: {\n            'loss': [],\n            'accuracy': [],\n            'recall': []\n        },\n        labelHierarchy: [],\n        labelnames: [],\n        layoutInfo: {\n            layoutNetwork: {}, // very similar to allData.network, with some attributes for layout added\n            focusID: '_model/', // default focus node is root node\n            t: -1 // a timestamp\n        },\n        colors: {},\n        hierarchyColors: {},\n        featureMapNodeID: null // which node to show feature map\n    },\n    mutations: {\n        setAllData: function setAllData(state, allData) {\n            state.network = allData.network;\n            state.statistic = allData.statistic;\n        },\n        setNetwork: function setNetwork(state, network) {\n            state.network = network;\n        },\n        setLayoutInfo: function setLayoutInfo(state, layoutInfo) {\n            state.layoutInfo = layoutInfo;\n        },\n        setFeatureMapNodeID: function setFeatureMapNodeID(state, featureMapNodeID) {\n            state.featureMapNodeID = featureMapNodeID;\n        },\n        setLabelHierarchy: function setLabelHierarchy(state, hierarchy) {\n            state.labelHierarchy = hierarchy.hierarchy;\n            state.labelnames = hierarchy.names;\n        },\n        setColors: function setColors(state, colors) {\n            state.colors = colors;\n        },\n        setSelectedImageID: function setSelectedImageID(state, selectedImageID) {\n            state.selectedImageID = selectedImageID;\n        },\n        setHierarchyColors: function setHierarchyColors(state, hierarchyColors) {\n            state.hierarchyColors = hierarchyColors;\n        }\n    },\n    getters: {\n        network: function network(state) {\n            return state.network;\n        },\n        statistic: function statistic(state) {\n            return state.statistic;\n        },\n        featureMapNodeID: function featureMapNodeID(state) {\n            return state.featureMapNodeID;\n        },\n        selectedImageID: function selectedImageID(state) {\n            return state.selectedImageID;\n        },\n        layoutInfo: function layoutInfo(state) {\n            return state.layoutInfo;\n        },\n        labelHierarchy: function labelHierarchy(state) {\n            return state.labelHierarchy;\n        },\n        labelnames: function labelnames(state) {\n            return state.labelnames;\n        },\n        colors: function colors(state) {\n            return state.colors;\n        },\n        hierarchyColors: function hierarchyColors(state) {\n            return state.hierarchyColors;\n        },\n        URL_GET_ALL_DATA: function URL_GET_ALL_DATA(state) {\n            return state.APIBASE + '/api/allData';\n        },\n        URL_GET_FEATURE_INFO: function URL_GET_FEATURE_INFO(state) {\n            return state.APIBASE + '/api/featureInfo';\n        },\n        URL_GET_LABEL_HIERARCHY: function URL_GET_LABEL_HIERARCHY(state) {\n            return state.APIBASE + '/api/labelHierarchy';\n        },\n        URL_GET_FEATURE: function URL_GET_FEATURE(state) {\n            return function (leafID, index) {\n                return state.APIBASE + ('/api/feature?leafID=' + leafID + '&index=' + index);\n            };\n        },\n        URL_GET_IMAGE_GRADIENT: function URL_GET_IMAGE_GRADIENT(state) {\n            return function (imageID, method) {\n                return state.APIBASE + ('/api/imageGradient?imageID=' + imageID + '&method=' + method);\n            };\n        },\n        URL_GET_GRID: function URL_GET_GRID(state) {\n            return state.APIBASE + '/api/grid';\n        },\n        URL_FIND_GRID_PARENT: function URL_FIND_GRID_PARENT(state) {\n            return state.APIBASE + '/api/findParent';\n        },\n        URL_RUN_IMAGE_ON_MODEL: function URL_RUN_IMAGE_ON_MODEL(state) {\n            return state.APIBASE + '/api/networkOnImage';\n        }\n    }\n}));\n// EXTERNAL MODULE: ./node_modules/vuescroll/dist/vuescroll-native.js\nvar vuescroll_native = __webpack_require__(5680);\nvar vuescroll_native_default = /*#__PURE__*/__webpack_require__.n(vuescroll_native);\n// EXTERNAL MODULE: ./node_modules/vuescroll/dist/vuescroll.css\nvar vuescroll = __webpack_require__(5661);\n;// CONCATENATED MODULE: ./src/main.js\n// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\n\n\n\n\n// import the css file\n\nvue_esm.default.use((vuescroll_native_default()));\n\nvue_esm.default.config.productionTip = false;\n\n/* eslint-disable no-new */\nnew vue_esm.default({\n    el: '#app',\n    store: store,\n    render: function render(h) {\n        return h(App);\n    },\n    components: { App: App }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2344\n")},9483:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(9252)(true);\n// imports\n\n\n// module\nexports.push([module.id, "\\nhtml, body, #app {\\n  margin: 0;\\n  width: 100%;\\n  height: 100%;\\n}\\n#app {\\n  font-family: \'Avenir\', Helvetica, Arial, sans-serif;\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: column;\\n          flex-direction: column;\\n}\\n#navigation {\\n  width: 100%;\\n  height: 50px;\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-align: center;\\n      -ms-flex-align: center;\\n          align-items: center;\\n  background: rgb(54, 54, 54);\\n}\\n#navi-title {\\n  color: rgb(255, 255, 255);\\n  font-weight: 900;\\n  font-size: 40px;\\n  margin: 0 50px 0 20px;\\n  float: left;\\n}\\n", "", {"version":3,"sources":["/data/zhaowei/fast-grid-layout/frontend/src/src/App.vue","/data/zhaowei/fast-grid-layout/frontend/src/App.vue"],"names":[],"mappings":";AAqFA;EACA,UAAA;EACA,YAAA;EACA,aAAA;CCCA;ADEA;EACA,oDAAA;EACA,qBAAA;EAAA,qBAAA;EAAA,cAAA;EACA,6BAAA;EAAA,8BAAA;MAAA,2BAAA;UAAA,uBAAA;CCMA;ADHA;EACA,YAAA;EACA,aAAA;EACA,qBAAA;EAAA,qBAAA;EAAA,cAAA;EACA,0BAAA;MAAA,uBAAA;UAAA,oBAAA;EACA,4BAAA;CCUA;ADPA;EACA,0BAAA;EACA,iBAAA;EACA,gBAAA;EACA,sBAAA;EACA,YAAA;CCUA","file":"App.vue?vue&type=style&index=0&lang=css&","sourcesContent":["<template>\\n    <div id=\\"app\\">\\n      <el-menu\\n        mode=\\"horizontal\\"\\n        background-color=\\"#545c64\\"\\n        text-color=\\"#fff\\"\\n        active-text-color=\\"#ffd04b\\">\\n        <li id=\\"navi-title\\">GridLayout</li>\\n      </el-menu>\\n      <svg width=\\"0\\" height=\\"0\\">\\n          <defs id=\\"texture\\">\\n              <pattern v-for=\\"(texture, i) in textures\\" v-html=\\"texture\\" :key=\\"i\\">\\n              </pattern>\\n          </defs>\\n      </svg>\\n      <data-view></data-view>\\n    </div>\\n  </template>\\n\\n<script>\\n/* eslint-disable max-len */\\nimport DataView from \'./components/DataView.vue\';\\nimport Vue from \'vue\';\\nimport {Menu, MenuItem} from \'element-ui\';\\nimport axios from \'axios\';\\n\\nVue.use(Menu);\\nVue.use(MenuItem);\\n\\n// main vue component\\nexport default {\\n    name: \'App\',\\n    components: {DataView},\\n    data:\\n          function() {\\n              return {\\n                  textures: [],\\n                  colorsscope: {\'hue_scope\': [0, 360], \'lumi_scope\': [35, 95]},\\n              };\\n          },\\n    mounted: function() {\\n        const store = this.$store;\\n        const that = this;\\n        axios.get(store.getters.URL_GET_ALL_DATA)\\n            .then(function(response) {\\n                store.commit(\'setAllData\', response.data);\\n                console.log(\'network data\', store.getters.network);\\n            });\\n        axios.post(store.getters.URL_GET_LABEL_HIERARCHY)\\n            .then(function(response) {\\n                const matrix = response.data;\\n                const colors = that.initColor(matrix.hierarchy);\\n                store.commit(\'setColors\', colors);\\n                // init hierarchy colors\\n                const hierarchyColors = {...colors};\\n                store.commit(\'setHierarchyColors\', hierarchyColors);\\n                // save label hierarchy data\\n                store.commit(\'setLabelHierarchy\', matrix);\\n                console.log(\'label hierarchy data\', matrix);\\n            });\\n    },\\n    methods: {\\n        initColor(hierarchy) {\\n            const basecolors = [\'#8dd3c7\', \'#fee789\', \'#fe614f\', \'#80b1d3\',\\n                \'#fdb462\', \'#b3de69\', \'#fccde5\', \'#bc80bd\', \'#ccebc5\', \'#ffed6f\'];\\n            // 1:ffffb3  2:fb8072\\n            const colors = {}; // fill and opacity\\n\\n            for (let i=0; i<hierarchy.length; i++) {\\n                colors[hierarchy[i].name] = {\\n                    fill: basecolors[i],\\n                    opacity: 1,\\n                };\\n            }\\n            return colors;\\n        },\\n        rgb2hex(rgb) {\\n            return \'#\'+(1<<24|rgb.r<<16|rgb.g<<8|rgb.b).toString(16).substring(1);\\n        },\\n    },\\n};\\n\\n<\/script>\\n\\n<style>\\nhtml, body, #app {\\n  margin: 0;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n#app {\\n  font-family: \'Avenir\', Helvetica, Arial, sans-serif;\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n#navigation {\\n  width: 100%;\\n  height: 50px;\\n  display: flex;\\n  align-items: center;\\n  background: rgb(54, 54, 54);\\n}\\n\\n#navi-title {\\n  color: rgb(255, 255, 255);\\n  font-weight: 900;\\n  font-size: 40px;\\n  margin: 0 50px 0 20px;\\n  float: left;\\n}\\n</style>\\n\\n","\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nhtml, body, #app {\\n  margin: 0;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n#app {\\n  font-family: \'Avenir\', Helvetica, Arial, sans-serif;\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: column;\\n          flex-direction: column;\\n}\\n\\n#navigation {\\n  width: 100%;\\n  height: 50px;\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-align: center;\\n      -ms-flex-align: center;\\n          align-items: center;\\n  background: rgb(54, 54, 54);\\n}\\n\\n#navi-title {\\n  color: rgb(255, 255, 255);\\n  font-weight: 900;\\n  font-size: 40px;\\n  margin: 0 50px 0 20px;\\n  float: left;\\n}\\n"],"sourceRoot":""}]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9483\n')},784:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(9252)(true);\n// imports\n\n\n// module\nexports.push([module.id, "\\n#data-content[data-v-393edb49] {\\n    width: 100%;\\n    height: 100%;\\n    overflow: hidden;\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-pack: center;\\n        -ms-flex-pack: center;\\n            justify-content: center;\\n}\\n", "", {"version":3,"sources":["/data/zhaowei/fast-grid-layout/frontend/src/components/src/components/DataView.vue","/data/zhaowei/fast-grid-layout/frontend/src/components/DataView.vue"],"names":[],"mappings":";AAyBA;IACA,YAAA;IACA,aAAA;IACA,iBAAA;IACA,qBAAA;IAAA,qBAAA;IAAA,cAAA;IACA,yBAAA;QAAA,sBAAA;YAAA,wBAAA;CCKA","file":"DataView.vue?vue&type=style&index=0&id=393edb49&scoped=true&lang=css&","sourcesContent":["<template>\\n    <div id=\\"data-content\\">\\n        <gird-layout ref=\\"grider\\"></gird-layout>\\n        <legend-component></legend-component>\\n    </div>\\n</template>\\n\\n<script>\\nimport GirdLayout from \'./GridLayout.vue\';\\nimport LegendComponent from \'./Legend.vue\';\\n\\nexport default {\\n    components: {GirdLayout, LegendComponent},\\n    name: \'DataView\',\\n    data() {\\n        return {\\n            hoveredNode: [],\\n        };\\n    },\\n    methods: {\\n    },\\n};\\n<\/script>\\n\\n<style scoped>\\n#data-content {\\n    width: 100%;\\n    height: 100%;\\n    overflow: hidden;\\n    display: flex;\\n    justify-content: center;\\n}\\n</style>\\n","\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n#data-content {\\n    width: 100%;\\n    height: 100%;\\n    overflow: hidden;\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-pack: center;\\n        -ms-flex-pack: center;\\n            justify-content: center;\\n}\\n"],"sourceRoot":""}]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg0LmpzIiwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLElBQStDO0FBQ2xGOzs7QUFHQTtBQUNBLDREQUE0RCxrQkFBa0IsbUJBQW1CLHVCQUF1QiwyQkFBMkIsMkJBQTJCLG9CQUFvQiwrQkFBK0IsZ0NBQWdDLHNDQUFzQyxHQUFHLFVBQVUsMk1BQTJNLE1BQU0sVUFBVSxVQUFVLFdBQVcsV0FBVyxXQUFXLFVBQVUsV0FBVyxXQUFXLFdBQVcscVVBQXFVLDZDQUE2QyxvQkFBb0IsbUJBQW1CLDRCQUE0QixzQ0FBc0Msa0JBQWtCLDBDQUEwQyxPQUFPLGlCQUFpQixPQUFPLEtBQUssOENBQThDLGtCQUFrQixtQkFBbUIsdUJBQXVCLG9CQUFvQiw4QkFBOEIsR0FBRyxnRkFBZ0Ysa0JBQWtCLG1CQUFtQix1QkFBdUIsMkJBQTJCLDJCQUEyQixvQkFBb0IsK0JBQStCLGdDQUFnQyxzQ0FBc0MsR0FBRyxxQkFBcUI7O0FBRWxwRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvRGF0YVZpZXcudnVlPzVjYzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbiNkYXRhLWNvbnRlbnRbZGF0YS12LTM5M2VkYjQ5XSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2RhdGEvemhhb3dlaS9mYXN0LWdyaWQtbGF5b3V0L2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL3NyYy9jb21wb25lbnRzL0RhdGFWaWV3LnZ1ZVwiLFwiL2RhdGEvemhhb3dlaS9mYXN0LWdyaWQtbGF5b3V0L2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL0RhdGFWaWV3LnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBeUJBO0lBQ0EsWUFBQTtJQUNBLGFBQUE7SUFDQSxpQkFBQTtJQUNBLHFCQUFBO0lBQUEscUJBQUE7SUFBQSxjQUFBO0lBQ0EseUJBQUE7UUFBQSxzQkFBQTtZQUFBLHdCQUFBO0NDS0FcIixcImZpbGVcIjpcIkRhdGFWaWV3LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTM5M2VkYjQ5JnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICAgIDxkaXYgaWQ9XFxcImRhdGEtY29udGVudFxcXCI+XFxuICAgICAgICA8Z2lyZC1sYXlvdXQgcmVmPVxcXCJncmlkZXJcXFwiPjwvZ2lyZC1sYXlvdXQ+XFxuICAgICAgICA8bGVnZW5kLWNvbXBvbmVudD48L2xlZ2VuZC1jb21wb25lbnQ+XFxuICAgIDwvZGl2PlxcbjwvdGVtcGxhdGU+XFxuXFxuPHNjcmlwdD5cXG5pbXBvcnQgR2lyZExheW91dCBmcm9tICcuL0dyaWRMYXlvdXQudnVlJztcXG5pbXBvcnQgTGVnZW5kQ29tcG9uZW50IGZyb20gJy4vTGVnZW5kLnZ1ZSc7XFxuXFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgICBjb21wb25lbnRzOiB7R2lyZExheW91dCwgTGVnZW5kQ29tcG9uZW50fSxcXG4gICAgbmFtZTogJ0RhdGFWaWV3JyxcXG4gICAgZGF0YSgpIHtcXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgaG92ZXJlZE5vZGU6IFtdLFxcbiAgICAgICAgfTtcXG4gICAgfSxcXG4gICAgbWV0aG9kczoge1xcbiAgICB9LFxcbn07XFxuPC9zY3JpcHQ+XFxuXFxuPHN0eWxlIHNjb3BlZD5cXG4jZGF0YS1jb250ZW50IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbjwvc3R5bGU+XFxuXCIsXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG4jZGF0YS1jb250ZW50IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAgICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///784\n')},9759:function(module,exports,__webpack_require__){eval("exports = module.exports = __webpack_require__(9252)(true);\n// imports\n\n\n// module\nexports.push([module.id, \"\\n#grid-layout {\\n    width: 50%;\\n    height: -o-calc(100% - 20px);\\n    height: calc(100% - 20px);\\n    margin: 10px 10px 10px 10px;\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-orient: vertical;\\n    -webkit-box-direction: normal;\\n        -ms-flex-direction: column;\\n            flex-direction: column;\\n    -webkit-box-pack: center;\\n        -ms-flex-pack: center;\\n            justify-content: center;\\n    -webkit-box-align: center;\\n        -ms-flex-align: center;\\n            align-items: center;\\n    position: relative;\\n}\\n#grid-drawer {\\n    width: 100%;\\n    height: 100%;\\n    -ms-flex-negative: 100;\\n        flex-shrink: 100;\\n}\\n#grid-icons {\\n    width: 100%;\\n    height: 50px;\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-pack: start;\\n        -ms-flex-pack: start;\\n            justify-content: flex-start;\\n    -webkit-box-align: center;\\n        -ms-flex-align: center;\\n            align-items: center;\\n    margin: 0 0 0 50px;\\n    -ms-flex-negative: 0;\\n        flex-shrink: 0;\\n}\\n.grid-icon {\\n    width: 20px;\\n    height: 20px;\\n    margin: 0 5px 0 5px;\\n    cursor: pointer;\\n}\\n.lasso-not-possible, .lasso-node {\\n    fill: none\\n}\\n.lasso-possible {\\n    fill: rgb(200,200,200);\\n}\\n.lasso path {\\n    stroke: rgb(80,80,80);\\n    stroke-width:2px;\\n}\\n.lasso .drawn {\\n    fill-opacity:.05 ;\\n}\\n.lasso .loop_close {\\n    fill:none;\\n    stroke-dasharray: 4,4;\\n}\\n.lasso .origin {\\n    fill:#3399FF;\\n    fill-opacity:.5;\\n}\\n.cell-tooltip {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: column;\\n          flex-direction: column;\\n  -webkit-box-align: center;\\n      -ms-flex-align: center;\\n          align-items: center;\\n  background: #ffffff;\\n  color: gray;\\n  font-weight: bold;\\n  padding: 5px 10px;\\n  font-size: 13px;\\n  border-radius: 4px;\\n}\\n.gird-tooltip-image {\\n    width: 100px;\\n    height: 100px;\\n    margin: 10px 0 0 0;\\n}\\n#grid-tooltip-arrow,\\n#grid-tooltip-arrow::before {\\n  position: absolute;\\n  width: 8px;\\n  height: 8px;\\n  background: inherit;\\n}\\n#grid-tooltip-arrow {\\n  visibility: hidden;\\n}\\n#grid-tooltip-arrow::before {\\n  visibility: visible;\\n  content: '';\\n  -webkit-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n}\\n.cell-tooltip[data-popper-placement^='top'] > #grid-tooltip-arrow {\\n  bottom: -4px;\\n}\\n.cell-tooltip[data-popper-placement^='bottom'] > #grid-tooltip-arrow {\\n  top: -4px;\\n}\\n.cell-tooltip[data-popper-placement^='left'] > #grid-tooltip-arrow {\\n  right: -4px;\\n}\\n.cell-tooltip[data-popper-placement^='right'] > #grid-tooltip-arrow {\\n  left: -4px;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/data/zhaowei/fast-grid-layout/frontend/src/components/src/components/GridLayout.vue\",\"/data/zhaowei/fast-grid-layout/frontend/src/components/GridLayout.vue\"],\"names\":[],\"mappings\":\";AA4dA;IACA,WAAA;IAGA,6BAAA;IACA,0BAAA;IACA,4BAAA;IACA,qBAAA;IAAA,qBAAA;IAAA,cAAA;IACA,6BAAA;IAAA,8BAAA;QAAA,2BAAA;YAAA,uBAAA;IACA,yBAAA;QAAA,sBAAA;YAAA,wBAAA;IACA,0BAAA;QAAA,uBAAA;YAAA,oBAAA;IACA,mBAAA;CCQA;ADLA;IACA,YAAA;IACA,aAAA;IACA,uBAAA;QAAA,iBAAA;CCSA;ADNA;IACA,YAAA;IACA,aAAA;IACA,qBAAA;IAAA,qBAAA;IAAA,cAAA;IACA,wBAAA;QAAA,qBAAA;YAAA,4BAAA;IACA,0BAAA;QAAA,uBAAA;YAAA,oBAAA;IACA,mBAAA;IACA,qBAAA;QAAA,eAAA;CCgBA;ADbA;IACA,YAAA;IACA,aAAA;IACA,oBAAA;IACA,gBAAA;CCgBA;ADbA;IACA,UAAA;CCgBA;ADbA;IACA,uBAAA;CCgBA;ADbA;IACA,sBAAA;IACA,iBAAA;CCgBA;ADbA;IACA,kBAAA;CCgBA;ADbA;IACA,UAAA;IACA,sBAAA;CCgBA;ADbA;IACA,aAAA;IACA,gBAAA;CCgBA;ADbA;EACA,qBAAA;EAAA,qBAAA;EAAA,cAAA;EACA,6BAAA;EAAA,8BAAA;MAAA,2BAAA;UAAA,uBAAA;EACA,0BAAA;MAAA,uBAAA;UAAA,oBAAA;EACA,oBAAA;EACA,YAAA;EACA,kBAAA;EACA,kBAAA;EACA,gBAAA;EACA,mBAAA;CCuBA;ADpBA;IACA,aAAA;IACA,cAAA;IACA,mBAAA;CCuBA;ADpBA;;EAEA,mBAAA;EACA,WAAA;EACA,YAAA;EACA,oBAAA;CCuBA;ADpBA;EACA,mBAAA;CCuBA;ADpBA;EACA,oBAAA;EACA,YAAA;EACA,iCAAA;UAAA,yBAAA;CCwBA;ADrBA;EACA,aAAA;CCwBA;ADrBA;EACA,UAAA;CCwBA;ADrBA;EACA,YAAA;CCwBA;ADrBA;EACA,WAAA;CCwBA\",\"file\":\"GridLayout.vue?vue&type=style&index=0&lang=css&\",\"sourcesContent\":[\"<template>\\n    <div id=\\\"grid-layout\\\">\\n        <div id=\\\"grid-icons\\\">\\n            <img id=\\\"grid-zoomin-icon\\\" class=\\\"grid-icon\\\" src=\\\"/static/images/zoomin.svg\\\" @click=\\\"initlasso\\\">\\n            <img id=\\\"grid-home-icon\\\" class=\\\"grid-icon\\\" src=\\\"/static/images/home.png\\\" @click=\\\"zoomin()\\\">\\n        </div>\\n        <svg id=\\\"grid-drawer\\\" ref=\\\"gridsvg\\\">\\n            <g id=\\\"grid-main-g\\\" transform=\\\"translate(0,0)\\\">\\n                <g id=\\\"grid-g\\\"></g>\\n                <g id=\\\"highlight-g\\\"></g>\\n                <g id=\\\"lasso-g\\\"></g>\\n            </g>\\n        </svg>\\n        <waiting-icon v-if=\\\"rendering\\\"></waiting-icon>\\n    </div>\\n</template>\\n\\n<script>\\nimport {mapGetters} from 'vuex';\\nimport axios from 'axios';\\nimport * as d3 from 'd3';\\nwindow.d3 = d3;\\nrequire('../js/d3-lasso.js');\\nimport Util from './Util.vue';\\nimport GlobalVar from './GlovalVar.vue';\\nimport WaitingIcon from './WaitingIcon.vue';\\nimport cloneDeep from 'lodash.clonedeep';\\nimport PriorityQueue from 'priorityqueue';\\nimport {createPopper} from '@popperjs/core';\\n\\nexport default {\\n    name: 'GridLayout',\\n    components: {WaitingIcon},\\n    mixins: [Util, GlobalVar],\\n    computed: {\\n        ...mapGetters([\\n            'labelHierarchy',\\n            'labelnames',\\n            'URL_GET_GRID',\\n            'hierarchyColors',\\n            'colors',\\n        ]),\\n        svg: function() {\\n            return d3.select('#grid-drawer');\\n        },\\n        mainG: function() {\\n            return this.svg.select('#grid-main-g');\\n        },\\n        girdG: function() {\\n            return this.mainG.select('#grid-g');\\n        },\\n        lassoG: function() {\\n            return this.mainG.select('#lasso-g');\\n        },\\n        svgWidth: function() {\\n            return this.gridCellAttrs['size'] * this.gridInfo['width'];\\n        },\\n        nodesDict: function() {\\n            const nodesDict = {};\\n            for (const node of this.nodes) {\\n                nodesDict[node.index] = node;\\n            }\\n            return nodesDict;\\n        },\\n        lasso: function() {\\n            return window.d3.lasso;\\n        },\\n        highlightG: function() {\\n            return this.mainG.select('#highlight-g');\\n        },\\n    },\\n    watch: {\\n        // all info was loaded\\n        labelnames: function(newColors, oldColors) {\\n            if (!this.rendering && this.nodes.length>0 ) {\\n                this.render();\\n            }\\n        },\\n    },\\n    data: function() {\\n        return {\\n            nodes: [],\\n            showImageNodesMax: 1600,\\n            showImageNodes: [],\\n            depth: 0,\\n            gridInfo: {},\\n            rendering: false,\\n\\n            //\\n            gridCellsInG: undefined,\\n            lassoNodesInG: undefined,\\n\\n            //\\n            gridCellAttrs: {\\n                'gClass': 'grid-cell-in-g',\\n                'size': 60,\\n                'stroke-width': 0,\\n                'stroke': 'gray',\\n                'rectOpacity': 1,\\n                'centerR': 3,\\n                'centerClass': 'lasso-node',\\n                'centerClassNotSelect': 'lasso-not-possible',\\n                'centerClassSelect': 'lasso-possible',\\n                'imageMargin': 4,\\n            },\\n\\n            tooltipClass: 'cell-tooltip',\\n        };\\n    },\\n    methods: {\\n        zoomin: function(nodes) {\\n            this.rendering = true;\\n            if (nodes===undefined) {\\n                // zoom home\\n                nodes = this.nodes;\\n                this.depth = 0;\\n            }\\n            if (nodes.length>0 && typeof(nodes[0])!=='number') {\\n                nodes = nodes.map((d) => d.index);\\n            }\\n            const that = this;\\n            const tsnes = nodes.map((d) => this.nodesDict[d].tsne);\\n            axios.post(this.URL_GET_GRID, {\\n                nodes: nodes,\\n                depth: this.depth,\\n                constraints: tsnes,\\n            }).then(function(response) {\\n                that.nodes = response.data.nodes;\\n                that.depth = response.data.depth;\\n                that.gridInfo = response.data.grid;\\n                that.render();\\n            });\\n        },\\n        render: async function() {\\n            // sort nodes and find most unconfident nodes\\n            this.nodes.sort(function(a, b) {\\n                return a.confidence-b.confidence;\\n            });\\n            for (let i=0; i<Math.min(this.showImageNodesMax, this.nodes.length); i++) {\\n                this.nodes[i].showImage = true;\\n            }\\n            // set color\\n            this.setLabelColor(this.labelHierarchy, this.colors, this.nodes, this.labelnames);\\n\\n            this.gridCellsInG = this.girdG.selectAll('.'+this.gridCellAttrs['gClass']).data(this.nodes, (d)=>d.index);\\n            this.lassoNodesInG = this.lassoG.selectAll('.'+this.gridCellAttrs['centerClass']).data(this.nodes, (d)=>d.index);\\n\\n            await this.remove();\\n            this.transform();\\n            await this.update();\\n            await this.create();\\n\\n            this.gridCellsInG = this.girdG.selectAll('.'+this.gridCellAttrs['gClass']);\\n            this.lassoNodesInG = this.lassoG.selectAll('.'+this.gridCellAttrs['centerClass']);\\n            this.rendering = false;\\n        },\\n        create: async function() {\\n            const that = this;\\n            return new Promise((resolve, reject) => {\\n                const gridCellsInG = that.gridCellsInG.enter()\\n                    .append('g')\\n                    .attr('class', that.gridCellAttrs['gClass'])\\n                    .attr('opacity', 0)\\n                    .attr('transform', (d) => `translate(${(d.grid%that.gridInfo.width)*that.gridCellAttrs['size']},\\n                        ${Math.floor(d.grid/that.gridInfo.width)*that.gridCellAttrs['size']})`)\\n                    .on('mouseenter', function(e, d) {\\n                        // eslint-disable-next-line no-invalid-this\\n                        const node = d3.select(this).node();\\n                        that.createTooltip(d)\\n                            .then(function(tooltip) {\\n                                createPopper(node, tooltip, {\\n                                    modifiers: [\\n                                        {\\n                                            name: 'offset',\\n                                            options: {\\n                                                offset: [0, 8],\\n                                            },\\n                                        },\\n                                    ],\\n                                });\\n                            });\\n                    })\\n                    .on('mouseleave', function() {\\n                        that.removeTooltip();\\n                    });\\n\\n                gridCellsInG.transition()\\n                    .duration(that.createDuration)\\n                    .attr('opacity', 1)\\n                    .on('end', resolve);\\n\\n                gridCellsInG.append('rect')\\n                    .attr('x', 0)\\n                    .attr('y', 0)\\n                    .attr('width', that.gridCellAttrs['size'])\\n                    .attr('height', that.gridCellAttrs['size'])\\n                    .attr('stroke', that.gridCellAttrs['stroke'])\\n                    .attr('stroke-width', that.gridCellAttrs['stroke-width'])\\n                    .attr('fill', (d)=>that.hierarchyColors[that.labelnames[d.pred]].fill)\\n                    .attr('opacity', (d)=>that.hierarchyColors[that.labelnames[d.pred]].opacity);\\n\\n                gridCellsInG.filter(function(d) {\\n                    return d.showImage;\\n                }).append('image')\\n                    .attr('x', that.gridCellAttrs['imageMargin'])\\n                    .attr('y', that.gridCellAttrs['imageMargin'])\\n                    .attr('width', that.gridCellAttrs['size']-2*that.gridCellAttrs['imageMargin'])\\n                    .attr('height', that.gridCellAttrs['size']-2*that.gridCellAttrs['imageMargin'])\\n                    .attr('href', '')\\n                    .each(function(node) {\\n                        const getImageGradientURL = that.$store.getters.URL_GET_IMAGE_GRADIENT;\\n                        // eslint-disable-next-line no-invalid-this\\n                        const img = d3.select(this);\\n                        axios.get(getImageGradientURL(node.index, 'origin'))\\n                            .then(function(response) {\\n                                img.attr('href', that.toImage(response.data));\\n                            });\\n                    });\\n\\n                that.lassoNodesInG.enter().append('circle')\\n                    .attr('class', that.gridCellAttrs['centerClass'])\\n                    .attr('r', that.gridCellAttrs['centerR'])\\n                    .attr('cx', (d)=>that.gridCellAttrs['size']/2+(d.grid%that.gridInfo.width)*that.gridCellAttrs['size'])\\n                    .attr('cy', (d)=>that.gridCellAttrs['size']/2+Math.floor(d.grid/that.gridInfo.width)*that.gridCellAttrs['size']);\\n\\n\\n                if ((that.gridCellsInG.enter().size() === 0) && (that.lassoNodesInG.enter().size() === 0)) {\\n                    resolve();\\n                }\\n            });\\n        },\\n        update: async function() {\\n            const that = this;\\n            return new Promise((resolve, reject) => {\\n                that.gridCellsInG.transition()\\n                    .duration(that.updateDuration)\\n                    .attr('transform', (d) => `translate(${(d.grid%that.gridInfo.width)*that.gridCellAttrs['size']},\\n                        ${Math.floor(d.grid/that.gridInfo.width)*that.gridCellAttrs['size']})`)\\n                    .on('end', resolve);\\n\\n                that.gridCellsInG.selectAll('rect')\\n                    .transition()\\n                    .duration(that.updateDuration)\\n                    .attr('fill', (d)=>that.hierarchyColors[that.labelnames[d.pred]].fill)\\n                    .attr('opacity', (d)=>that.hierarchyColors[that.labelnames[d.pred]].opacity)\\n                    .on('end', resolve);\\n\\n                that.lassoNodesInG\\n                    .attr('cx', (d)=>that.gridCellAttrs['size']/2+(d.grid%that.gridInfo.width)*that.gridCellAttrs['size'])\\n                    .attr('cy', (d)=>that.gridCellAttrs['size']/2+Math.floor(d.grid/that.gridInfo.width)*that.gridCellAttrs['size']);\\n\\n                if ((that.gridCellsInG.size() === 0) && (that.lassoNodesInG.size() === 0)) {\\n                    resolve();\\n                }\\n            });\\n        },\\n        remove: async function() {\\n            const that = this;\\n            return new Promise((resolve, reject) => {\\n                that.gridCellsInG.exit()\\n                    .transition()\\n                    .duration(that.removeDuration)\\n                    .attr('opacity', 0)\\n                    .remove()\\n                    .on('end', resolve);\\n\\n                that.lassoNodesInG.exit()\\n                    .transition()\\n                    .duration(that.removeDuration)\\n                    .attr('opacity', 0)\\n                    .remove()\\n                    .on('end', resolve);\\n\\n                if ((that.gridCellsInG.exit().size() === 0) && (that.lassoNodesInG.exit().size() === 0)) {\\n                    resolve();\\n                }\\n            });\\n        },\\n        transform: async function() {\\n            const that = this;\\n            return new Promise((resolve, reject) => {\\n                // compute transform\\n                const svgRealWidth = that.$refs.gridsvg.clientWidth;\\n                const svgRealHeight = that.$refs.gridsvg.clientHeight;\\n                const realSize = Math.min(svgRealWidth, svgRealHeight);\\n                let shiftx = 0;\\n                let shifty = 0;\\n                let scale = 1;\\n                if (that.svgWidth > realSize) {\\n                    scale = realSize/that.svgWidth;\\n                } else {\\n                    scale = 1;\\n                }\\n                shiftx = (svgRealWidth-scale*that.svgWidth)/2;\\n                shifty = (svgRealHeight-scale*that.svgWidth)/2;\\n                that.mainG.transition()\\n                    .duration(that.transformDuration)\\n                    .attr('transform', `translate(${shiftx} ${shifty}) scale(${scale})`)\\n                    .on('end', resolve);\\n            });\\n        },\\n        initlasso: function() {\\n            // Lasso functions\\n            const that = this;\\n            const lassoStart = function() {\\n                lasso.items()\\n                    .classed('lasso-not-possible', true)\\n                    .classed('lasso-possible', false);\\n            };\\n\\n            const lassoDraw = function() {\\n                // Style the possible dots\\n                lasso.possibleItems()\\n                    .classed('lasso-not-possible', false)\\n                    .classed('lasso-possible', true);\\n\\n                // Style the not possible dot\\n                lasso.notPossibleItems()\\n                    .classed('lasso-not-possible', true)\\n                    .classed('lasso-possible', false);\\n            };\\n\\n            const lassoEnd = function() {\\n            // Reset the color of all dots\\n                lasso.items()\\n                    .classed('lasso-not-possible', false)\\n                    .classed('lasso-possible', false);\\n                const selectednodes = lasso.selectedItems().data();\\n                if (selectednodes.length>0) {\\n                    that.zoomin(selectednodes);\\n                }\\n                that.stoplasso();\\n            };\\n\\n            const lasso = window.d3.lasso()\\n                .closePathSelect(true)\\n                .closePathDistance(100)\\n                .items(this.lassoNodesInG)\\n                .targetArea(this.svg)\\n                .on('start', lassoStart)\\n                .on('draw', lassoDraw)\\n                .on('end', lassoEnd);\\n\\n            this.svg.call(lasso);\\n        },\\n        stoplasso: function() {\\n            this.svg.select('.lasso').remove();\\n            this.svg.on('.drag', null);\\n        },\\n        setLabelColor: function(labelHierarchy, colors, nodes, labelnames) {\\n            const hierarchy = cloneDeep(labelHierarchy);\\n            const root = {\\n                name: '',\\n                children: hierarchy,\\n            };\\n            // count samples in each class\\n            const counts = {};\\n            for (const node of nodes) {\\n                if (counts[labelnames[node.pred]] === undefined) {\\n                    counts[labelnames[node.pred]] = 0;\\n                }\\n                counts[labelnames[node.pred]]++;\\n            }\\n            const dfsCount = function(root, counts) {\\n                if (typeof(root)==='string') {\\n                    if (counts[root]===undefined) {\\n                        counts[root] = 0;\\n                    }\\n                    return {\\n                        name: root,\\n                        count: counts[root],\\n                        children: [],\\n                        realChildren: [],\\n                        emptyChildren: [],\\n                    };\\n                } else {\\n                    let count = 0;\\n                    const realChildren = [];\\n                    const emptyChildren = [];\\n                    for (let i=0; i<root.children.length; i++) {\\n                        root.children[i] = dfsCount(root.children[i], counts);\\n                        count += root.children[i].count;\\n                        if (root.children[i].count !== 0) {\\n                            realChildren.push(root.children[i]);\\n                        } else {\\n                            emptyChildren.push(root.children[i]);\\n                        }\\n                    }\\n                    // filter out empty nodes\\n                    root.realChildren = realChildren;\\n                    root.emptyChildren = emptyChildren;\\n                    counts[root.name] = count;\\n                    root.count = count;\\n                    return root;\\n                }\\n            };\\n            dfsCount(root, counts);\\n            // set hierarchy color\\n            const pq = new PriorityQueue({\\n                'comparator': (a, b)=>{\\n                    return a.count>b.count?1:(a.count<b.count?-1:0);\\n                },\\n            });\\n            pq.push(root);\\n            const classThreshold = 10;\\n            const countThreshold = 0.5;\\n            const showNodes = {};\\n            for (const topnode of root.children) {\\n                showNodes[topnode.name] = colors[topnode.name];\\n            }\\n            while (top.length > 0) {\\n                const top = pq.top();\\n                if ((pq.length-1+top.realChildren.length<=classThreshold) || (top.count/root.count>=countThreshold)) {\\n                    pq.pop();\\n                    showNodes[top.name] = colors[top.name];\\n                    for (const child of top.realChildren) {\\n                        pq.push(child);\\n                    }\\n                } else {\\n                    for (const node of pq.toArray()) {\\n                        showNodes[node.name] = colors[node.name];\\n                    }\\n                    break;\\n                }\\n            }\\n            const hierarchyColors = {};\\n            const dfsSetColor = function(root, showNodes, hierarchyColors, baseColor) {\\n                if (showNodes[root.name] !== undefined) {\\n                    baseColor = showNodes[root.name];\\n                }\\n                hierarchyColors[root.name] = baseColor;\\n                for (const child of root.children) {\\n                    dfsSetColor(child, showNodes, hierarchyColors, baseColor);\\n                }\\n            };\\n            dfsSetColor(root, showNodes, hierarchyColors);\\n            this.$store.commit('setHierarchyColors', hierarchyColors);\\n        },\\n        createTooltip: function(node) {\\n            const that = this;\\n            const getImageGradientURL = this.$store.getters.URL_GET_IMAGE_GRADIENT;\\n            const tooltip = d3.select('#grid-layout').append('div').attr('class', that.tooltipClass).style('display', 'none');\\n            return axios.get(getImageGradientURL(node.index, 'origin'))\\n                .then(function(response) {\\n                    tooltip.style('display', 'flex');\\n                    tooltip.html(`<div class=\\\"grid-tooltip-info\\\">ID: ${node.index}</div>\\n                        <div>${that.labelnames[node.label]} -> ${that.labelnames[node.pred]}</div>\\n                        <div>confidence: ${Math.round(node.confidence*100000)/100000}</div>\\n                    <img class=\\\"gird-tooltip-image\\\" src=\\\"${that.toImage(response.data)}\\\"/>\\n                    <div id=\\\"grid-tooltip-arrow\\\" data-popper-arrow></div>`);\\n                    return tooltip.node();\\n                });\\n        },\\n        removeTooltip: function() {\\n            d3.selectAll('.'+this.tooltipClass).remove();\\n        },\\n    },\\n    mounted: function() {\\n        const that = this;\\n        axios.post(that.URL_GET_GRID, {\\n            nodes: [],\\n            depth: 0,\\n        }).then(function(response) {\\n            that.nodes = response.data.nodes;\\n            that.depth = response.data.depth;\\n            that.gridInfo = response.data.grid;\\n            if (!that.rendering && that.labelnames.length>0) {\\n                that.rendering = true;\\n                that.render();\\n            }\\n        });\\n    },\\n};\\n<\/script>\\n\\n<style>\\n#grid-layout {\\n    width: 50%;\\n    height: -moz-calc(100% - 20px);\\n    height: -webkit-calc(100% - 20px);\\n    height: -o-calc(100% - 20px);\\n    height: calc(100% - 20px);\\n    margin: 10px 10px 10px 10px;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    align-items: center;\\n    position: relative;\\n}\\n\\n#grid-drawer {\\n    width: 100%;\\n    height: 100%;\\n    flex-shrink: 100;\\n}\\n\\n#grid-icons {\\n    width: 100%;\\n    height: 50px;\\n    display: flex;\\n    justify-content: flex-start;\\n    align-items: center;\\n    margin: 0 0 0 50px;\\n    flex-shrink: 0;\\n}\\n\\n.grid-icon {\\n    width: 20px;\\n    height: 20px;\\n    margin: 0 5px 0 5px;\\n    cursor: pointer;\\n}\\n\\n.lasso-not-possible, .lasso-node {\\n    fill: none\\n}\\n\\n.lasso-possible {\\n    fill: rgb(200,200,200);\\n}\\n\\n.lasso path {\\n    stroke: rgb(80,80,80);\\n    stroke-width:2px;\\n}\\n\\n.lasso .drawn {\\n    fill-opacity:.05 ;\\n}\\n\\n.lasso .loop_close {\\n    fill:none;\\n    stroke-dasharray: 4,4;\\n}\\n\\n.lasso .origin {\\n    fill:#3399FF;\\n    fill-opacity:.5;\\n}\\n\\n.cell-tooltip {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  background: #ffffff;\\n  color: gray;\\n  font-weight: bold;\\n  padding: 5px 10px;\\n  font-size: 13px;\\n  border-radius: 4px;\\n}\\n\\n.gird-tooltip-image {\\n    width: 100px;\\n    height: 100px;\\n    margin: 10px 0 0 0;\\n}\\n\\n#grid-tooltip-arrow,\\n#grid-tooltip-arrow::before {\\n  position: absolute;\\n  width: 8px;\\n  height: 8px;\\n  background: inherit;\\n}\\n\\n#grid-tooltip-arrow {\\n  visibility: hidden;\\n}\\n\\n#grid-tooltip-arrow::before {\\n  visibility: visible;\\n  content: '';\\n  transform: rotate(45deg);\\n}\\n\\n.cell-tooltip[data-popper-placement^='top'] > #grid-tooltip-arrow {\\n  bottom: -4px;\\n}\\n\\n.cell-tooltip[data-popper-placement^='bottom'] > #grid-tooltip-arrow {\\n  top: -4px;\\n}\\n\\n.cell-tooltip[data-popper-placement^='left'] > #grid-tooltip-arrow {\\n  right: -4px;\\n}\\n\\n.cell-tooltip[data-popper-placement^='right'] > #grid-tooltip-arrow {\\n  left: -4px;\\n}\\n</style>\\n\",\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n#grid-layout {\\n    width: 50%;\\n    height: -o-calc(100% - 20px);\\n    height: calc(100% - 20px);\\n    margin: 10px 10px 10px 10px;\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-orient: vertical;\\n    -webkit-box-direction: normal;\\n        -ms-flex-direction: column;\\n            flex-direction: column;\\n    -webkit-box-pack: center;\\n        -ms-flex-pack: center;\\n            justify-content: center;\\n    -webkit-box-align: center;\\n        -ms-flex-align: center;\\n            align-items: center;\\n    position: relative;\\n}\\n\\n#grid-drawer {\\n    width: 100%;\\n    height: 100%;\\n    -ms-flex-negative: 100;\\n        flex-shrink: 100;\\n}\\n\\n#grid-icons {\\n    width: 100%;\\n    height: 50px;\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-pack: start;\\n        -ms-flex-pack: start;\\n            justify-content: flex-start;\\n    -webkit-box-align: center;\\n        -ms-flex-align: center;\\n            align-items: center;\\n    margin: 0 0 0 50px;\\n    -ms-flex-negative: 0;\\n        flex-shrink: 0;\\n}\\n\\n.grid-icon {\\n    width: 20px;\\n    height: 20px;\\n    margin: 0 5px 0 5px;\\n    cursor: pointer;\\n}\\n\\n.lasso-not-possible, .lasso-node {\\n    fill: none\\n}\\n\\n.lasso-possible {\\n    fill: rgb(200,200,200);\\n}\\n\\n.lasso path {\\n    stroke: rgb(80,80,80);\\n    stroke-width:2px;\\n}\\n\\n.lasso .drawn {\\n    fill-opacity:.05 ;\\n}\\n\\n.lasso .loop_close {\\n    fill:none;\\n    stroke-dasharray: 4,4;\\n}\\n\\n.lasso .origin {\\n    fill:#3399FF;\\n    fill-opacity:.5;\\n}\\n\\n.cell-tooltip {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: column;\\n          flex-direction: column;\\n  -webkit-box-align: center;\\n      -ms-flex-align: center;\\n          align-items: center;\\n  background: #ffffff;\\n  color: gray;\\n  font-weight: bold;\\n  padding: 5px 10px;\\n  font-size: 13px;\\n  border-radius: 4px;\\n}\\n\\n.gird-tooltip-image {\\n    width: 100px;\\n    height: 100px;\\n    margin: 10px 0 0 0;\\n}\\n\\n#grid-tooltip-arrow,\\n#grid-tooltip-arrow::before {\\n  position: absolute;\\n  width: 8px;\\n  height: 8px;\\n  background: inherit;\\n}\\n\\n#grid-tooltip-arrow {\\n  visibility: hidden;\\n}\\n\\n#grid-tooltip-arrow::before {\\n  visibility: visible;\\n  content: '';\\n  -webkit-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n}\\n\\n.cell-tooltip[data-popper-placement^='top'] > #grid-tooltip-arrow {\\n  bottom: -4px;\\n}\\n\\n.cell-tooltip[data-popper-placement^='bottom'] > #grid-tooltip-arrow {\\n  top: -4px;\\n}\\n\\n.cell-tooltip[data-popper-placement^='left'] > #grid-tooltip-arrow {\\n  right: -4px;\\n}\\n\\n.cell-tooltip[data-popper-placement^='right'] > #grid-tooltip-arrow {\\n  left: -4px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9759\n")},5255:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(9252)(true);\n// imports\n\n\n// module\nexports.push([module.id, "\\n.waiting-div {\\n    background-color: #D3D3D3;\\n    opacity: 0.5;\\n    position: absolute;\\n    bottom: 0;\\n    right: 0;\\n    top: 0;\\n    left: 0;\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-pack: center;\\n        -ms-flex-pack: center;\\n            justify-content: center;\\n    -webkit-box-align: center;\\n        -ms-flex-align: center;\\n            align-items: center;\\n}\\n@-webkit-keyframes rotating /* Safari and Chrome */ {\\nfrom {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n}\\nto {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n}\\n}\\n@keyframes rotating {\\nfrom {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n}\\nto {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n}\\n}\\n.rotating {\\n  -webkit-animation: rotating 2s linear infinite;\\n  animation: rotating 2s linear infinite;\\n  width: 50px;\\n  height: 50px;\\n}\\n", "", {"version":3,"sources":["/data/zhaowei/fast-grid-layout/frontend/src/components/src/components/WaitingIcon.vue","/data/zhaowei/fast-grid-layout/frontend/src/components/WaitingIcon.vue"],"names":[],"mappings":";AAcA;IACA,0BAAA;IACA,aAAA;IACA,mBAAA;IACA,UAAA;IACA,SAAA;IACA,OAAA;IACA,QAAA;IACA,qBAAA;IAAA,qBAAA;IAAA,cAAA;IACA,yBAAA;QAAA,sBAAA;YAAA,wBAAA;IACA,0BAAA;QAAA,uBAAA;YAAA,oBAAA;CCOA;ADJA;AACA;IACA,gCAAA;IAEA,wBAAA;CCME;ADJF;IACA,kCAAA;IAEA,0BAAA;CCKE;CACF;ADHA;AACA;IAGA,kCAAA;IAEA,0BAAA;CCGE;ADDF;IAGA,gCAAA;IAEA,wBAAA;CCAE;CACF;ADEA;EACA,+CAAA;EAIA,uCAAA;EACA,YAAA;EACA,aAAA;CCFA","file":"WaitingIcon.vue?vue&type=style&index=0&lang=css&","sourcesContent":["<template>\\n    <div class=\\"waiting-div\\">\\n        <img class=\\"rotating\\" src=\\"/static/images/refresh.png\\">\\n    </div>\\n</template>\\n\\n<script>\\n\\nexport default {\\n    name: \'waiting-icon\',\\n};\\n<\/script>\\n\\n<style>\\n.waiting-div {\\n    background-color: #D3D3D3;\\n    opacity: 0.5;\\n    position: absolute;\\n    bottom: 0;\\n    right: 0;\\n    top: 0;\\n    left: 0;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n@-webkit-keyframes rotating /* Safari and Chrome */ {\\n  from {\\n    -webkit-transform: rotate(0deg);\\n    -o-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  to {\\n    -webkit-transform: rotate(360deg);\\n    -o-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n@keyframes rotating {\\n  from {\\n    -ms-transform: rotate(360deg);\\n    -moz-transform: rotate(360deg);\\n    -webkit-transform: rotate(360deg);\\n    -o-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n  to {\\n    -ms-transform: rotate(0deg);\\n    -moz-transform: rotate(0deg);\\n    -webkit-transform: rotate(0deg);\\n    -o-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n}\\n.rotating {\\n  -webkit-animation: rotating 2s linear infinite;\\n  -moz-animation: rotating 2s linear infinite;\\n  -ms-animation: rotating 2s linear infinite;\\n  -o-animation: rotating 2s linear infinite;\\n  animation: rotating 2s linear infinite;\\n  width: 50px;\\n  height: 50px;\\n}\\n</style>\\n","\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n.waiting-div {\\n    background-color: #D3D3D3;\\n    opacity: 0.5;\\n    position: absolute;\\n    bottom: 0;\\n    right: 0;\\n    top: 0;\\n    left: 0;\\n    display: -webkit-box;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-box-pack: center;\\n        -ms-flex-pack: center;\\n            justify-content: center;\\n    -webkit-box-align: center;\\n        -ms-flex-align: center;\\n            align-items: center;\\n}\\n\\n@-webkit-keyframes rotating /* Safari and Chrome */ {\\n  from {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  to {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n\\n@keyframes rotating {\\n  from {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n  to {\\n    -webkit-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n}\\n\\n.rotating {\\n  -webkit-animation: rotating 2s linear infinite;\\n  animation: rotating 2s linear infinite;\\n  width: 50px;\\n  height: 50px;\\n}\\n"],"sourceRoot":""}]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTI1NS5qcyIsIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxJQUErQztBQUNsRjs7O0FBR0E7QUFDQSwwQ0FBMEMsZ0NBQWdDLG1CQUFtQix5QkFBeUIsZ0JBQWdCLGVBQWUsYUFBYSxjQUFjLDJCQUEyQiwyQkFBMkIsb0JBQW9CLCtCQUErQixnQ0FBZ0Msc0NBQXNDLGdDQUFnQyxpQ0FBaUMsa0NBQWtDLEdBQUcsdURBQXVELFFBQVEsc0NBQXNDLDhCQUE4QixHQUFHLE1BQU0sd0NBQXdDLGdDQUFnQyxHQUFHLEdBQUcsdUJBQXVCLFFBQVEsd0NBQXdDLGdDQUFnQyxHQUFHLE1BQU0sc0NBQXNDLDhCQUE4QixHQUFHLEdBQUcsYUFBYSxtREFBbUQsMkNBQTJDLGdCQUFnQixpQkFBaUIsR0FBRyxVQUFVLGlOQUFpTixLQUFLLFdBQVcsVUFBVSxXQUFXLFVBQVUsVUFBVSxVQUFVLFVBQVUsV0FBVyxXQUFXLFVBQVUsV0FBVyxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsS0FBSyxLQUFLLEtBQUssV0FBVyxXQUFXLEtBQUssS0FBSyxXQUFXLFdBQVcsS0FBSyxLQUFLLEtBQUssS0FBSyxXQUFXLFdBQVcsS0FBSyxLQUFLLFdBQVcsV0FBVyxLQUFLLEtBQUssS0FBSyxXQUFXLFdBQVcsVUFBVSxVQUFVLDRQQUE0UCwrQkFBK0Isc0NBQXNDLGdDQUFnQyxtQkFBbUIseUJBQXlCLGdCQUFnQixlQUFlLGFBQWEsY0FBYyxvQkFBb0IsOEJBQThCLDBCQUEwQixHQUFHLHlEQUF5RCxVQUFVLHNDQUFzQyxpQ0FBaUMsOEJBQThCLEtBQUssUUFBUSx3Q0FBd0MsbUNBQW1DLGdDQUFnQyxLQUFLLEdBQUcsdUJBQXVCLFVBQVUsb0NBQW9DLHFDQUFxQyx3Q0FBd0MsbUNBQW1DLGdDQUFnQyxLQUFLLFFBQVEsa0NBQWtDLG1DQUFtQyxzQ0FBc0MsaUNBQWlDLDhCQUE4QixLQUFLLEdBQUcsYUFBYSxtREFBbUQsZ0RBQWdELCtDQUErQyw4Q0FBOEMsMkNBQTJDLGdCQUFnQixpQkFBaUIsR0FBRyx5REFBeUQsZ0NBQWdDLG1CQUFtQix5QkFBeUIsZ0JBQWdCLGVBQWUsYUFBYSxjQUFjLDJCQUEyQiwyQkFBMkIsb0JBQW9CLCtCQUErQixnQ0FBZ0Msc0NBQXNDLGdDQUFnQyxpQ0FBaUMsa0NBQWtDLEdBQUcseURBQXlELFVBQVUsc0NBQXNDLDhCQUE4QixLQUFLLFFBQVEsd0NBQXdDLGdDQUFnQyxLQUFLLEdBQUcseUJBQXlCLFVBQVUsd0NBQXdDLGdDQUFnQyxLQUFLLFFBQVEsc0NBQXNDLDhCQUE4QixLQUFLLEdBQUcsZUFBZSxtREFBbUQsMkNBQTJDLGdCQUFnQixpQkFBaUIsR0FBRyxxQkFBcUI7O0FBRTFrSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvV2FpdGluZ0ljb24udnVlP2RmYmUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbi53YWl0aW5nLWRpdiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNEM0QzRDM7XFxuICAgIG9wYWNpdHk6IDAuNTtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBib3R0b206IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5ALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRpbmcgLyogU2FmYXJpIGFuZCBDaHJvbWUgKi8ge1xcbmZyb20ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG59XFxudG8ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxufVxcbn1cXG5Aa2V5ZnJhbWVzIHJvdGF0aW5nIHtcXG5mcm9tIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbn1cXG50byB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbn1cXG59XFxuLnJvdGF0aW5nIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiByb3RhdGluZyAycyBsaW5lYXIgaW5maW5pdGU7XFxuICBhbmltYXRpb246IHJvdGF0aW5nIDJzIGxpbmVhciBpbmZpbml0ZTtcXG4gIHdpZHRoOiA1MHB4O1xcbiAgaGVpZ2h0OiA1MHB4O1xcbn1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2RhdGEvemhhb3dlaS9mYXN0LWdyaWQtbGF5b3V0L2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL3NyYy9jb21wb25lbnRzL1dhaXRpbmdJY29uLnZ1ZVwiLFwiL2RhdGEvemhhb3dlaS9mYXN0LWdyaWQtbGF5b3V0L2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL1dhaXRpbmdJY29uLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBY0E7SUFDQSwwQkFBQTtJQUNBLGFBQUE7SUFDQSxtQkFBQTtJQUNBLFVBQUE7SUFDQSxTQUFBO0lBQ0EsT0FBQTtJQUNBLFFBQUE7SUFDQSxxQkFBQTtJQUFBLHFCQUFBO0lBQUEsY0FBQTtJQUNBLHlCQUFBO1FBQUEsc0JBQUE7WUFBQSx3QkFBQTtJQUNBLDBCQUFBO1FBQUEsdUJBQUE7WUFBQSxvQkFBQTtDQ09BO0FESkE7QUFDQTtJQUNBLGdDQUFBO0lBRUEsd0JBQUE7Q0NNRTtBREpGO0lBQ0Esa0NBQUE7SUFFQSwwQkFBQTtDQ0tFO0NBQ0Y7QURIQTtBQUNBO0lBR0Esa0NBQUE7SUFFQSwwQkFBQTtDQ0dFO0FEREY7SUFHQSxnQ0FBQTtJQUVBLHdCQUFBO0NDQUU7Q0FDRjtBREVBO0VBQ0EsK0NBQUE7RUFJQSx1Q0FBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0NDRkFcIixcImZpbGVcIjpcIldhaXRpbmdJY29uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9Y3NzJlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICAgIDxkaXYgY2xhc3M9XFxcIndhaXRpbmctZGl2XFxcIj5cXG4gICAgICAgIDxpbWcgY2xhc3M9XFxcInJvdGF0aW5nXFxcIiBzcmM9XFxcIi9zdGF0aWMvaW1hZ2VzL3JlZnJlc2gucG5nXFxcIj5cXG4gICAgPC9kaXY+XFxuPC90ZW1wbGF0ZT5cXG5cXG48c2NyaXB0PlxcblxcbmV4cG9ydCBkZWZhdWx0IHtcXG4gICAgbmFtZTogJ3dhaXRpbmctaWNvbicsXFxufTtcXG48L3NjcmlwdD5cXG5cXG48c3R5bGU+XFxuLndhaXRpbmctZGl2IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0QzRDNEMztcXG4gICAgb3BhY2l0eTogMC41O1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyByb3RhdGluZyAvKiBTYWZhcmkgYW5kIENocm9tZSAqLyB7XFxuICBmcm9tIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gICAgLW8tdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgfVxcbiAgdG8ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgIC1vLXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICB9XFxufVxcbkBrZXlmcmFtZXMgcm90YXRpbmcge1xcbiAgZnJvbSB7XFxuICAgIC1tcy10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gICAgLW8tdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gIH1cXG4gIHRvIHtcXG4gICAgLW1zLXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICB9XFxufVxcbi5yb3RhdGluZyB7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogcm90YXRpbmcgMnMgbGluZWFyIGluZmluaXRlO1xcbiAgLW1vei1hbmltYXRpb246IHJvdGF0aW5nIDJzIGxpbmVhciBpbmZpbml0ZTtcXG4gIC1tcy1hbmltYXRpb246IHJvdGF0aW5nIDJzIGxpbmVhciBpbmZpbml0ZTtcXG4gIC1vLWFuaW1hdGlvbjogcm90YXRpbmcgMnMgbGluZWFyIGluZmluaXRlO1xcbiAgYW5pbWF0aW9uOiByb3RhdGluZyAycyBsaW5lYXIgaW5maW5pdGU7XFxuICB3aWR0aDogNTBweDtcXG4gIGhlaWdodDogNTBweDtcXG59XFxuPC9zdHlsZT5cXG5cIixcIlxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcbi53YWl0aW5nLWRpdiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNEM0QzRDM7XFxuICAgIG9wYWNpdHk6IDAuNTtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBib3R0b206IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRpbmcgLyogU2FmYXJpIGFuZCBDaHJvbWUgKi8ge1xcbiAgZnJvbSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgfVxcbiAgdG8ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgcm90YXRpbmcge1xcbiAgZnJvbSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gIH1cXG4gIHRvIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICB9XFxufVxcblxcbi5yb3RhdGluZyB7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogcm90YXRpbmcgMnMgbGluZWFyIGluZmluaXRlO1xcbiAgYW5pbWF0aW9uOiByb3RhdGluZyAycyBsaW5lYXIgaW5maW5pdGU7XFxuICB3aWR0aDogNTBweDtcXG4gIGhlaWdodDogNTBweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5255\n')},136:function(module,__unused_webpack_exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(9483);\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(7913)(\"200d7a22\", content, true, {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLElBQTRUO0FBQ2xWO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxJQUEwRCwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9BcHAudnVlPzkxNjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTZbMF0ucnVsZXNbMF0udXNlWzFdIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTZbMF0ucnVsZXNbMF0udXNlWzJdIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9Y3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiMjAwZDdhMjJcIiwgY29udGVudCwgdHJ1ZSwge30pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///136\n")},998:function(module,__unused_webpack_exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(784);\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(7913)(\"0a3e297e\", content, true, {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTk4LmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEdBQXFXO0FBQzNYO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxJQUE2RCwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL0RhdGFWaWV3LnZ1ZT8xMmIwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC02WzBdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC02WzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0RhdGFWaWV3LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTM5M2VkYjQ5JnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiMGEzZTI5N2VcIiwgY29udGVudCwgdHJ1ZSwge30pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///998\n")},202:function(module,__unused_webpack_exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(9759);\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(7913)(\"8534261c\", content, true, {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAyLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLElBQStVO0FBQ3JXO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxJQUE2RCwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL0dyaWRMYXlvdXQudnVlPzk5MDQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTZbMF0ucnVsZXNbMF0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTZbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vR3JpZExheW91dC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjg1MzQyNjFjXCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///202\n")},4479:function(module,__unused_webpack_exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(5255);\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(7913)(\"2ffb1226\", content, true, {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ3OS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxJQUFnVjtBQUN0VztBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsSUFBNkQsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9XYWl0aW5nSWNvbi52dWU/NWRhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNlswXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNlswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9XYWl0aW5nSWNvbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjJmZmIxMjI2XCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4479\n")}},__webpack_module_cache__={},deferred;function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var C=__webpack_module_cache__[I]={id:I,loaded:!1,exports:{}};return __webpack_modules__[I].call(C.exports,C,C.exports,__webpack_require__),C.loaded=!0,C.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.amdO={},deferred=[],__webpack_require__.O=function(I,g,C,A){if(!g){var n=1/0;for(t=0;t<deferred.length;t++){g=deferred[t][0],C=deferred[t][1],A=deferred[t][2];for(var Q=!0,F=0;F<g.length;F++)(!1&A||n>=A)&&Object.keys(__webpack_require__.O).every((function(I){return __webpack_require__.O[I](g[F])}))?g.splice(F--,1):(Q=!1,A<n&&(n=A));if(Q){deferred.splice(t--,1);var B=C();void 0!==B&&(I=B)}}return I}A=A||0;for(var t=deferred.length;t>0&&deferred[t-1][2]>A;t--)deferred[t]=deferred[t-1];deferred[t]=[g,C,A]},__webpack_require__.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return __webpack_require__.d(g,{a:g}),g},__webpack_require__.d=function(I,g){for(var C in g)__webpack_require__.o(g,C)&&!__webpack_require__.o(I,C)&&Object.defineProperty(I,C,{enumerable:!0,get:g[C]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"==typeof window)return window}}(),__webpack_require__.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},__webpack_require__.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},__webpack_require__.nmd=function(I){return I.paths=[],I.children||(I.children=[]),I},__webpack_require__.p="/",function(){var I={143:0};__webpack_require__.O.j=function(g){return 0===I[g]};var g=function(g,C){var A,n,Q=C[0],F=C[1],B=C[2],t=0;for(A in F)__webpack_require__.o(F,A)&&(__webpack_require__.m[A]=F[A]);if(B)var c=B(__webpack_require__);for(g&&g(C);t<Q.length;t++)n=Q[t],__webpack_require__.o(I,n)&&I[n]&&I[n][0](),I[Q[t]]=0;return __webpack_require__.O(c)},C=self.webpackChunkfrontend=self.webpackChunkfrontend||[];C.forEach(g.bind(null,0)),C.push=g.bind(null,C.push.bind(C))}();var __webpack_exports__=__webpack_require__.O(void 0,[216,83,260,318,478,669],(function(){return __webpack_require__(2344)}));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();