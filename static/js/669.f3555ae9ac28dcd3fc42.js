(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[669],{4709:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(9252)(true);\n// imports\n\n\n// module\nexports.push([module.id, "/* \\n  Since 4.10.0, you don\'t need to import css flie any more,\\n  this flie is only used for backward compatible. Maybe deleted  \\n  in the future.\\n*/\\n", "", {"version":3,"sources":["/data/zhaowei/fast-grid-layout/frontend/node_modules/vuescroll/dist/vuescroll.css"],"names":[],"mappings":"AAAA;;;;EAIE","file":"vuescroll.css","sourcesContent":["/* \\n  Since 4.10.0, you don\'t need to import css flie any more,\\n  this flie is only used for backward compatible. Maybe deleted  \\n  in the future.\\n*/\\n"],"sourceRoot":""}]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcwOS5qcyIsIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxJQUFrQztBQUNyRTs7O0FBR0E7QUFDQSw2TEFBNkwsMklBQTJJLDhOQUE4Tjs7QUFFdGlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvdnVlc2Nyb2xsL2Rpc3QvdnVlc2Nyb2xsLmNzcz8xNmFlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qIFxcbiAgU2luY2UgNC4xMC4wLCB5b3UgZG9uJ3QgbmVlZCB0byBpbXBvcnQgY3NzIGZsaWUgYW55IG1vcmUsXFxuICB0aGlzIGZsaWUgaXMgb25seSB1c2VkIGZvciBiYWNrd2FyZCBjb21wYXRpYmxlLiBNYXliZSBkZWxldGVkICBcXG4gIGluIHRoZSBmdXR1cmUuXFxuKi9cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2RhdGEvemhhb3dlaS9mYXN0LWdyaWQtbGF5b3V0L2Zyb250ZW5kL25vZGVfbW9kdWxlcy92dWVzY3JvbGwvZGlzdC92dWVzY3JvbGwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7O0VBSUVcIixcImZpbGVcIjpcInZ1ZXNjcm9sbC5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogXFxuICBTaW5jZSA0LjEwLjAsIHlvdSBkb24ndCBuZWVkIHRvIGltcG9ydCBjc3MgZmxpZSBhbnkgbW9yZSxcXG4gIHRoaXMgZmxpZSBpcyBvbmx5IHVzZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGlibGUuIE1heWJlIGRlbGV0ZWQgIFxcbiAgaW4gdGhlIGZ1dHVyZS5cXG4qL1xcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4709\n')},5661:function(module,__unused_webpack_exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(4709);\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(7913)(\"a570bc54\", content, true, {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY2MS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxJQUF1SjtBQUM3SztBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsSUFBZ0QsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvdnVlc2Nyb2xsL2Rpc3QvdnVlc2Nyb2xsLmNzcz9hNTMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTZbMF0ucnVsZXNbMF0udXNlWzFdIS4uLy4uL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC02WzBdLnJ1bGVzWzBdLnVzZVsyXSEuL3Z1ZXNjcm9sbC5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiYTU3MGJjNTRcIiwgY29udGVudCwgdHJ1ZSwge30pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5661\n")},5680:function(module,__unused_webpack_exports,__webpack_require__){eval("/*\n    * Vuescroll v4.17.3\n    * (c) 2018-2021 Yi(Yves) Wang\n    * Released under the MIT License\n    * Github: https://github.com/YvesCoding/vuescroll\n    * Website: http://vuescrolljs.yvescoding.org/\n    */\n   \n(function (global, factory) {\n\t true ? module.exports = factory(__webpack_require__(538)) :\n\t0;\n}(this, (function (Vue) { 'use strict';\n\nVue = Vue && Vue.hasOwnProperty('default') ? Vue['default'] : Vue;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nfunction isIE() {\n  /* istanbul ignore if */\n  if (isServer()) return false;\n\n  var agent = navigator.userAgent.toLowerCase();\n  return agent.indexOf('msie') !== -1 || agent.indexOf('trident') !== -1 || agent.indexOf(' edge/') !== -1;\n}\n\nvar isIos = function isIos() {\n  /* istanbul ignore if */\n  if (isServer()) return false;\n\n  var u = navigator.userAgent;\n  return !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);\n};\n\n/* istanbul ignore next */\nvar isServer = function isServer() {\n  return Vue.prototype.$isServer;\n};\n\nvar touchManager = function () {\n  function touchManager() {\n    classCallCheck(this, touchManager);\n  }\n\n  createClass(touchManager, [{\n    key: 'getEventObject',\n    value: function getEventObject(originEvent) {\n      return this.touchObject ? this.isTouch ? originEvent.touches : [originEvent] : null;\n    }\n  }, {\n    key: 'getTouchObject',\n    value: function getTouchObject() /* istanbul ignore next */{\n      if (isServer()) return null;\n\n      this.isTouch = false;\n      var agent = navigator.userAgent,\n          platform = navigator.platform,\n          touchObject = {};\n      touchObject.touch = !!('ontouchstart' in window && !window.opera || 'msmaxtouchpoints' in window.navigator || 'maxtouchpoints' in window.navigator || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);\n      touchObject.nonDeskTouch = touchObject.touch && !/win32/i.test(platform) || touchObject.touch && /win32/i.test(platform) && /mobile/i.test(agent);\n\n      touchObject.eventType = 'onmousedown' in window && !touchObject.nonDeskTouch ? 'mouse' : 'ontouchstart' in window ? 'touch' : 'msmaxtouchpoints' in window.navigator || navigator.msMaxTouchPoints > 0 ? 'mstouchpoints' : 'maxtouchpoints' in window.navigator || navigator.maxTouchPoints > 0 ? 'touchpoints' : 'mouse';\n      switch (touchObject.eventType) {\n        case 'mouse':\n          touchObject.touchstart = 'mousedown';\n          touchObject.touchend = 'mouseup';\n          touchObject.touchmove = 'mousemove';\n\n          touchObject.touchenter = 'mouseenter';\n          touchObject.touchmove = 'mousemove';\n          touchObject.touchleave = 'mouseleave';\n          break;\n        case 'touch':\n          touchObject.touchstart = 'touchstart';\n          touchObject.touchend = 'touchend';\n          touchObject.touchmove = 'touchmove';\n          touchObject.touchcancel = 'touchcancel';\n\n          touchObject.touchenter = 'touchstart';\n          touchObject.touchmove = 'touchmove';\n          touchObject.touchleave = 'touchend';\n          this.isTouch = true;\n          break;\n        case 'mstouchpoints':\n          touchObject.touchstart = 'MSPointerDown';\n          touchObject.touchend = 'MSPointerUp';\n          touchObject.touchmove = 'MSPointerMove';\n          touchObject.touchcancel = 'MSPointerCancel';\n\n          touchObject.touchenter = 'MSPointerDown';\n          touchObject.touchmove = 'MSPointerMove';\n          touchObject.touchleave = 'MSPointerUp';\n          break;\n        case 'touchpoints':\n          touchObject.touchstart = 'pointerdown';\n          touchObject.touchend = 'pointerup';\n          touchObject.touchmove = 'pointermove';\n          touchObject.touchcancel = 'pointercancel';\n\n          touchObject.touchenter = 'pointerdown';\n          touchObject.touchmove = 'pointermove';\n          touchObject.touchleave = 'pointerup';\n          break;\n      }\n\n      return this.touchObject = touchObject;\n    }\n  }]);\n  return touchManager;\n}();\n\nfunction deepCopy(from, to, shallow) {\n  if (shallow && isUndef(to)) {\n    return from;\n  }\n\n  if (isArray(from)) {\n    to = [];\n    from.forEach(function (item, index) {\n      to[index] = deepCopy(item, to[index]);\n    });\n  } else if (from) {\n    if (!isPlainObj(from)) {\n      return from;\n    }\n    to = {};\n    for (var key in from) {\n      to[key] = _typeof(from[key]) === 'object' ? deepCopy(from[key], to[key]) : from[key];\n    }\n  }\n  return to;\n}\n\nfunction mergeObject(from, to, force, shallow) {\n  if (shallow && isUndef(to)) {\n    return from;\n  }\n\n  to = to || {};\n\n  if (isArray(from)) {\n    if (!isArray(to) && force) {\n      to = [];\n    }\n    if (isArray(to)) {\n      from.forEach(function (item, index) {\n        to[index] = mergeObject(item, to[index], force, shallow);\n      });\n    }\n  } else if (from) {\n    if (!isPlainObj(from)) {\n      if (force) {\n        to = from;\n      }\n    } else {\n      for (var key in from) {\n        if (_typeof(from[key]) === 'object') {\n          if (isUndef(to[key])) {\n            to[key] = deepCopy(from[key], to[key], shallow);\n          } else {\n            mergeObject(from[key], to[key], force, shallow);\n          }\n        } else {\n          if (isUndef(to[key]) || force) to[key] = from[key];\n        }\n      }\n    }\n  }\n\n  return to;\n}\n\nfunction defineReactive(target, key, source, souceKey) {\n  /* istanbul ignore if */\n  if (!source[key] && typeof source !== 'function') {\n    return;\n  }\n  souceKey = souceKey || key;\n  Object.defineProperty(target, key, {\n    get: function get$$1() {\n      return source[souceKey];\n    },\n\n    configurable: true\n  });\n}\n\nvar scrollBarWidth = void 0;\nfunction getGutter() {\n  /* istanbul ignore next */\n  if (isServer()) return 0;\n  if (scrollBarWidth !== undefined) return scrollBarWidth;\n  var outer = document.createElement('div');\n  outer.style.visibility = 'hidden';\n  outer.style.width = '100px';\n  outer.style.position = 'absolute';\n  outer.style.top = '-9999px';\n  document.body.appendChild(outer);\n\n  var widthNoScroll = outer.offsetWidth;\n  outer.style.overflow = 'scroll';\n\n  var inner = document.createElement('div');\n  inner.style.width = '100%';\n  outer.appendChild(inner);\n\n  var widthWithScroll = inner.offsetWidth;\n  outer.parentNode.removeChild(outer);\n  scrollBarWidth = widthNoScroll - widthWithScroll;\n\n  return scrollBarWidth;\n}\n\nfunction eventCenter(dom, eventName, hander) {\n  var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var type = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'on';\n\n  type == 'on' ? dom.addEventListener(eventName, hander, capture) : dom.removeEventListener(eventName, hander, capture);\n}\n\n\nvar warn = function warn(msg) {\n  console.warn('[vuescroll] ' + msg);\n};\n\nfunction isChildInParent(child, parent) {\n  var flag = false;\n  if (!child || !parent) {\n    return flag;\n  }\n  while (child.parentNode !== parent && child.parentNode.nodeType !== 9 && !child.parentNode._isVuescroll) {\n    child = child.parentNode;\n  }\n  if (child.parentNode == parent) {\n    flag = true;\n  }\n  return flag;\n}\n\nfunction getPrefix(global) {\n  var docStyle = document.documentElement.style;\n  var engine;\n  /* istanbul ignore if */\n  if (global.opera && Object.prototype.toString.call(opera) === '[object Opera]') {\n    engine = 'presto';\n  } /* istanbul ignore next */else if ('MozAppearance' in docStyle) {\n      engine = 'gecko';\n    } else if ('WebkitAppearance' in docStyle) {\n      engine = 'webkit';\n    } /* istanbul ignore next */else if (typeof navigator.cpuClass === 'string') {\n        engine = 'trident';\n      }\n  var vendorPrefix = {\n    trident: 'ms',\n    gecko: 'moz',\n    webkit: 'webkit',\n    presto: 'O'\n  }[engine];\n  return vendorPrefix;\n}\n\nfunction getComplitableStyle(property, value) {\n  /* istanbul ignore if */\n  if (isServer()) return false;\n\n  var compatibleValue = '-' + getPrefix(window) + '-' + value;\n  var testElm = document.createElement('div');\n  testElm.style[property] = compatibleValue;\n  if (testElm.style[property] == compatibleValue) {\n    return compatibleValue;\n  }\n  /* istanbul ignore next */\n  return false;\n}\n\n/**\n * Insert children into user-passed slot at vnode level\n */\nfunction insertChildrenIntoSlot(h) {\n  var parentVnode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var childVNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var swapChildren = arguments[4];\n\n  /* istanbul ignore if */\n  if (parentVnode && parentVnode.length > 1) {\n    return swapChildren ? [].concat(toConsumableArray(childVNode), toConsumableArray(parentVnode)) : [].concat(toConsumableArray(parentVnode), toConsumableArray(childVNode));\n  }\n\n  parentVnode = parentVnode[0];\n\n  var _getVnodeInfo = getVnodeInfo(parentVnode),\n      ch = _getVnodeInfo.ch,\n      tag = _getVnodeInfo.tag,\n      isComponent = _getVnodeInfo.isComponent;\n\n  if (isComponent) {\n    parentVnode.data = mergeObject({ attrs: parentVnode.componentOptions.propsData }, parentVnode.data, false, // force: false\n    true // shallow: true\n    );\n  }\n  ch = swapChildren ? [].concat(toConsumableArray(childVNode), toConsumableArray(ch)) : [].concat(toConsumableArray(ch), toConsumableArray(childVNode));\n  delete parentVnode.data.slot;\n\n  return h(tag, mergeObject(data, parentVnode.data, false, true), ch);\n}\n\n/**\n *  Get the info of a vnode,\n * vnode must be parentVnode\n */\nfunction getVnodeInfo(vnode) {\n  if (!vnode || vnode.length > 1) return {};\n\n  vnode = vnode[0] ? vnode[0] : vnode;\n  var isComponent = !!vnode.componentOptions;\n  var ch = void 0;\n  var tag = void 0;\n\n  if (isComponent) {\n    ch = vnode.componentOptions.children || [];\n    tag = vnode.componentOptions.tag;\n  } else {\n    ch = vnode.children || [];\n    tag = vnode.tag;\n  }\n\n  return {\n    isComponent: isComponent,\n    ch: ch,\n    tag: tag\n  };\n}\n\n/**\n * Get the vuescroll instance instead of\n * user pass component like slot.\n */\nfunction getRealParent(ctx) {\n  var parent = ctx.$parent;\n  if (!parent._isVuescrollRoot && parent) {\n    parent = parent.$parent;\n  }\n  return parent;\n}\n\nvar isArray = function isArray(_) {\n  return Array.isArray(_);\n};\nvar isPlainObj = function isPlainObj(_) {\n  return Object.prototype.toString.call(_) == '[object Object]';\n};\nvar isUndef = function isUndef(_) {\n  return typeof _ === 'undefined';\n};\n\nfunction getNumericValue(distance, size) {\n  var number = void 0;\n  if (!(number = /(-?\\d+(?:\\.\\d+?)?)%$/.exec(distance))) {\n    number = distance - 0;\n  } else {\n    number = number[1] - 0;\n    number = size * number / 100;\n  }\n  return number;\n}\n\nfunction createStyle(styleId, cssText) {\n  /* istanbul ignore if */\n  if (isServer() || document.getElementById(styleId)) {\n    return;\n  }\n\n  var head = document.head || doc.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n\n  style.id = styleId;\n  style.type = 'text/css';\n\n  /* istanbul ignore if */\n  if (style.styleSheet) {\n    style.styleSheet.cssText = cssText;\n  } else {\n    style.appendChild(document.createTextNode(cssText));\n  }\n\n  head.appendChild(style);\n}\n\n// Hide the ios native scrollbar.\nfunction createHideBarStyle() {\n  /* istanbul ignore next */\n  {\n    var cssText = '.__hidebar::-webkit-scrollbar {\\n      width: 0;\\n      height: 0;\\n    }';\n\n    createStyle('vuescroll-hide-ios-bar', cssText);\n  }\n}\n\n// create slide mode style\n\nvar api = {\n  mounted: function mounted() {\n    vsInstances[this._uid] = this;\n  },\n  beforeDestroy: function beforeDestroy() {\n    delete vsInstances[this._uid];\n  },\n\n  methods: {\n    // public api\n    scrollTo: function scrollTo(_ref, speed, easing) {\n      var x = _ref.x,\n          y = _ref.y;\n\n      // istanbul ignore if\n      if (speed === true || typeof speed == 'undefined') {\n        speed = this.mergedOptions.scrollPanel.speed;\n      }\n      this.internalScrollTo(x, y, speed, easing);\n    },\n    scrollBy: function scrollBy(_ref2, speed, easing) {\n      var _ref2$dx = _ref2.dx,\n          dx = _ref2$dx === undefined ? 0 : _ref2$dx,\n          _ref2$dy = _ref2.dy,\n          dy = _ref2$dy === undefined ? 0 : _ref2$dy;\n\n      var _getPosition = this.getPosition(),\n          _getPosition$scrollLe = _getPosition.scrollLeft,\n          scrollLeft = _getPosition$scrollLe === undefined ? 0 : _getPosition$scrollLe,\n          _getPosition$scrollTo = _getPosition.scrollTop,\n          scrollTop = _getPosition$scrollTo === undefined ? 0 : _getPosition$scrollTo;\n\n      if (dx) {\n        scrollLeft += getNumericValue(dx, this.scrollPanelElm.scrollWidth - this.$el.clientWidth);\n      }\n      if (dy) {\n        scrollTop += getNumericValue(dy, this.scrollPanelElm.scrollHeight - this.$el.clientHeight);\n      }\n      this.internalScrollTo(scrollLeft, scrollTop, speed, easing);\n    },\n    scrollIntoView: function scrollIntoView(elm) {\n      var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var parentElm = this.$el;\n\n      if (typeof elm === 'string') {\n        elm = parentElm.querySelector(elm);\n      }\n\n      if (!isChildInParent(elm, parentElm)) {\n        warn('The element or selector you passed is not the element of Vuescroll, please pass the element that is in Vuescroll to scrollIntoView API. ');\n        return;\n      }\n\n      // parent elm left, top\n\n      var _$el$getBoundingClien = this.$el.getBoundingClientRect(),\n          left = _$el$getBoundingClien.left,\n          top = _$el$getBoundingClien.top;\n      // child elm left, top\n\n\n      var _elm$getBoundingClien = elm.getBoundingClientRect(),\n          childLeft = _elm$getBoundingClien.left,\n          childTop = _elm$getBoundingClien.top;\n\n      var diffX = left - childLeft;\n      var diffY = top - childTop;\n\n      this.scrollBy({\n        dx: -diffX,\n        dy: -diffY\n      }, animate);\n    },\n    refresh: function refresh() {\n      this.refreshInternalStatus();\n      // refresh again to keep status is correct\n      this.$nextTick(this.refreshInternalStatus);\n    }\n  }\n};\n\n/** Public Api */\n\n/**\n * Refresh all\n */\nvar vsInstances = {};\nfunction refreshAll() {\n  for (var vs in vsInstances) {\n    vsInstances[vs].refresh();\n  }\n}\n\nvar baseConfig = {\n  // vuescroll\n  vuescroll: {\n    // vuescroll's size(height/width) should be a percent(100%)\n    // or be a number that is equal to its parentNode's width or\n    // height ?\n    sizeStrategy: 'percent',\n    /** Whether to detect dom resize or not */\n    detectResize: true,\n    /** Enable locking to the main axis if user moves only slightly on one of them at start */\n    locking: true\n  },\n  scrollPanel: {\n    // when component mounted.. it will automatically scrolls.\n    initialScrollY: false,\n    initialScrollX: false,\n    // feat: #11\n    scrollingX: true,\n    scrollingY: true,\n    speed: 300,\n    easing: undefined,\n    // Sometimes, the nativebar maybe on the left,\n    // See https://github.com/YvesCoding/vuescroll/issues/64\n    verticalNativeBarPos: 'right',\n    maxHeight: undefined,\n    maxWidth: undefined\n  },\n\n  //\n  rail: {\n    background: '#01a99a',\n    opacity: 0,\n    border: 'none',\n    /** Rail's size(Height/Width) , default -> 6px */\n    size: '6px',\n    /** Specify rail's border-radius, or the border-radius of rail and bar will be equal to the rail's size. default -> false **/\n    specifyBorderRadius: false,\n    /** Rail the distance from the two ends of the X axis and Y axis. **/\n    gutterOfEnds: null,\n    /** Rail the distance from the side of container. **/\n    gutterOfSide: '2px',\n    /** Whether to keep rail show or not, default -> false, event content height is not enough */\n    keepShow: false\n  },\n  bar: {\n    /** How long to hide bar after mouseleave, default -> 500 */\n    showDelay: 500,\n    /** Specify bar's border-radius, or the border-radius of rail and bar will be equal to the rail's size. default -> false **/\n    specifyBorderRadius: false,\n    /** Whether to show bar on scrolling, default -> true */\n    onlyShowBarOnScroll: true,\n    /** Whether to keep show or not, default -> false */\n    keepShow: false,\n    /** Bar's background , default -> #00a650 */\n    background: 'rgb(3, 185, 118)',\n    /** Bar's opacity, default -> 1  */\n    opacity: 1,\n    /** bar's size(Height/Width) , default -> 6px */\n\n    size: '6px',\n    minSize: 0,\n    disable: false\n  },\n  scrollButton: {\n    enable: false,\n    background: 'rgb(3, 185, 118)',\n    opacity: 1,\n    step: 180,\n    mousedownStep: 30\n  }\n};\n/**\n * validate the options\n * @export\n * @param {any} ops\n */\nfunction validateOps(ops) {\n  var renderError = false;\n  var scrollPanel = ops.scrollPanel;\n  var _ops$bar = ops.bar,\n      vBar = _ops$bar.vBar,\n      hBar = _ops$bar.hBar;\n  var _ops$rail = ops.rail,\n      vRail = _ops$rail.vRail,\n      hRail = _ops$rail.hRail;\n\n  // validate scrollPanel\n\n  var initialScrollY = scrollPanel['initialScrollY'];\n  var initialScrollX = scrollPanel['initialScrollX'];\n\n  if (initialScrollY && !String(initialScrollY).match(/^\\d+(\\.\\d+)?(%)?$/)) {\n    warn('The prop `initialScrollY` or `initialScrollX` should be a percent number like `10%` or an exact number that greater than or equal to 0 like `100`.');\n  }\n  if (initialScrollX && !String(initialScrollX).match(/^\\d+(\\.\\d+)?(%)?$/)) {\n    warn('The prop `initialScrollY` or `initialScrollX` should be a percent number like `10%` or an exact number that greater than or equal to 0 like `100`.');\n  }\n\n  // validate deprecated vBar/hBar vRail/hRail\n  if (vBar || hBar || vRail || hRail) {\n    warn('The options: vRail, hRail, vBar, hBar have been deprecated since v4.7.0,' + 'please use corresponing rail/bar instead!');\n  }\n\n  if (_extraValidate) {\n    _extraValidate = [].concat(_extraValidate);\n    _extraValidate.forEach(function (hasError) {\n      if (hasError(ops)) {\n        renderError = true;\n      }\n    });\n  }\n  return renderError;\n}\n\nvar _extraValidate = null;\nvar extendOpts = function extendOpts(extraOpts, extraValidate) {\n  extraOpts = [].concat(extraOpts);\n  extraOpts.forEach(function (opts) {\n    mergeObject(opts, baseConfig);\n  });\n\n  _extraValidate = extraValidate;\n};\n\n// all modes\n\n// do nothing\n\n// some small changes.\nvar smallChangeArray = ['mergedOptions.vuescroll.pullRefresh.tips', 'mergedOptions.vuescroll.pushLoad.tips', 'mergedOptions.vuescroll.scroller.disable', 'mergedOptions.rail', 'mergedOptions.bar'];\n// refresh/load dom ref/key...\n\nvar scrollMap = {\n  vertical: {\n    size: 'height',\n    opsSize: 'width',\n    posName: 'top',\n    opposName: 'bottom',\n    sidePosName: 'right',\n    page: 'pageY',\n    scroll: 'scrollTop',\n    scrollSize: 'scrollHeight',\n    offset: 'offsetHeight',\n    client: 'clientY',\n    axis: 'Y',\n    scrollButton: {\n      start: 'top',\n      end: 'bottom'\n    }\n  },\n  horizontal: {\n    size: 'width',\n    opsSize: 'height',\n    posName: 'left',\n    opposName: 'right',\n    sidePosName: 'bottom',\n    page: 'pageX',\n    scroll: 'scrollLeft',\n    scrollSize: 'scrollWidth',\n    offset: 'offsetWidth',\n    client: 'clientX',\n    axis: 'X',\n    scrollButton: {\n      start: 'left',\n      end: 'right'\n    }\n  }\n};\n\nfunction requestAnimationFrame(global) {\n  // Check for request animation Frame support\n  var requestFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame;\n  var isNative = !!requestFrame;\n\n  if (requestFrame && !/requestAnimationFrame\\(\\)\\s*\\{\\s*\\[native code\\]\\s*\\}/i.test(requestFrame.toString())) {\n    isNative = false;\n  }\n\n  if (isNative) {\n    return function (callback, root) {\n      requestFrame(callback, root);\n    };\n  }\n\n  var TARGET_FPS = 60;\n  var requests = {};\n  var rafHandle = 1;\n  var intervalHandle = null;\n  var lastActive = +new Date();\n\n  return function (callback) {\n    var callbackHandle = rafHandle++;\n\n    // Store callback\n    requests[callbackHandle] = callback;\n\n    // Create timeout at first request\n    if (intervalHandle === null) {\n      intervalHandle = setInterval(function () {\n        var time = +new Date();\n        var currentRequests = requests;\n\n        // Reset data structure before executing callbacks\n        requests = {};\n\n        for (var key in currentRequests) {\n          if (currentRequests.hasOwnProperty(key)) {\n            currentRequests[key](time);\n            lastActive = time;\n          }\n        }\n\n        // Disable the timeout when nothing happens for a certain\n        // period of time\n        if (time - lastActive > 2500) {\n          clearInterval(intervalHandle);\n          intervalHandle = null;\n        }\n      }, 1000 / TARGET_FPS);\n    }\n\n    return callbackHandle;\n  };\n}\n\nvar colorCache = {};\nvar rgbReg = /rgb\\(/;\nvar extractRgbColor = /rgb\\((.*)\\)/;\n\n// Transform a common color int oa `rgbA` color\nfunction getRgbAColor(color, opacity) {\n  var id = color + '&' + opacity;\n  if (colorCache[id]) {\n    return colorCache[id];\n  }\n\n  var div = document.createElement('div');\n  div.style.background = color;\n  document.body.appendChild(div);\n  var computedColor = window.getComputedStyle(div).backgroundColor;\n  document.body.removeChild(div);\n\n  /* istanbul ignore if */\n  if (!rgbReg.test(computedColor)) {\n    return color;\n  }\n\n  return colorCache[id] = 'rgba(' + extractRgbColor.exec(computedColor)[1] + ', ' + opacity + ')';\n}\n\nvar bar = {\n  name: 'bar',\n  props: {\n    ops: Object,\n    state: Object,\n    hideBar: Boolean,\n    otherBarHide: Boolean,\n    type: String\n  },\n  computed: {\n    bar: function bar() {\n      return scrollMap[this.type];\n    },\n    barSize: function barSize() {\n      return Math.max(this.state.size, this.ops.bar.minSize);\n    },\n    barRatio: function barRatio() {\n      return (1 - this.barSize) / (1 - this.state.size);\n    }\n  },\n  render: function render(h) {\n    var _style, _style2, _barStyle;\n\n    var vm = this;\n    /** Get rgbA format background color */\n    var railBackgroundColor = getRgbAColor(vm.ops.rail.background, vm.ops.rail.opacity);\n\n    if (!this.touchManager) {\n      this.touchManager = new touchManager();\n    }\n\n    /** Rail Data */\n    var railSize = vm.ops.rail.size;\n    var endPos = vm.otherBarHide ? 0 : railSize;\n    var touchObj = vm.touchManager.getTouchObject();\n    var rail = {\n      class: '__rail-is-' + vm.type,\n      style: (_style = {\n        position: 'absolute',\n        'z-index': '1',\n\n        borderRadius: vm.ops.rail.specifyBorderRadius || railSize,\n        background: railBackgroundColor,\n        border: vm.ops.rail.border\n      }, defineProperty(_style, vm.bar.opsSize, railSize), defineProperty(_style, vm.bar.posName, vm.ops.rail['gutterOfEnds'] || 0), defineProperty(_style, vm.bar.opposName, vm.ops.rail['gutterOfEnds'] || endPos), defineProperty(_style, vm.bar.sidePosName, vm.ops.rail['gutterOfSide']), _style)\n    };\n\n    if (touchObj) {\n      var _rail$on;\n\n      rail.on = (_rail$on = {}, defineProperty(_rail$on, touchObj.touchenter, function () {\n        vm.setRailHover();\n      }), defineProperty(_rail$on, touchObj.touchleave, function () {\n        vm.setRailLeave();\n      }), _rail$on);\n    }\n\n    // left space for scroll button\n    var buttonSize = vm.ops.scrollButton.enable ? railSize : 0;\n    var barWrapper = {\n      class: '__bar-wrap-is-' + vm.type,\n      style: (_style2 = {\n        position: 'absolute',\n        borderRadius: vm.ops.rail.specifyBorderRadius || railSize\n      }, defineProperty(_style2, vm.bar.posName, buttonSize), defineProperty(_style2, vm.bar.opposName, buttonSize), _style2),\n      on: {}\n    };\n\n    var scrollDistance = vm.state.posValue * vm.state.size;\n    var pos = scrollDistance * vm.barRatio / vm.barSize;\n    var opacity = vm.state.opacity;\n    var parent = getRealParent(this);\n\n    // set class hook\n    parent.setClassHook(this.type == 'vertical' ? 'vBarVisible' : 'hBarVisible', !!opacity);\n\n    /** Scrollbar style */\n    var barStyle = (_barStyle = {\n      cursor: 'pointer',\n      position: 'absolute',\n      margin: 'auto',\n      transition: 'opacity 0.5s',\n      'user-select': 'none',\n      'border-radius': 'inherit'\n\n    }, defineProperty(_barStyle, vm.bar.size, vm.barSize * 100 + '%'), defineProperty(_barStyle, 'background', vm.ops.bar.background), defineProperty(_barStyle, vm.bar.opsSize, vm.ops.bar.size), defineProperty(_barStyle, 'opacity', opacity), defineProperty(_barStyle, 'transform', 'translate' + scrollMap[vm.type].axis + '(' + pos + '%)'), _barStyle);\n    var bar = {\n      style: barStyle,\n      class: '__bar-is-' + vm.type,\n      ref: 'thumb',\n      on: {}\n    };\n\n    if (vm.type == 'vertical') {\n      barWrapper.style.width = '100%';\n      // Let bar to be on the center.\n      bar.style.left = 0;\n      bar.style.right = 0;\n    } else {\n      barWrapper.style.height = '100%';\n      bar.style.top = 0;\n      bar.style.bottom = 0;\n    }\n\n    /* istanbul ignore next */\n    {\n      var _touchObj = this.touchManager.getTouchObject();\n      bar.on[_touchObj.touchstart] = this.createBarEvent();\n      barWrapper.on[_touchObj.touchstart] = this.createTrackEvent();\n    }\n\n    return h(\n      'div',\n      rail,\n      [this.createScrollbarButton(h, 'start'), this.hideBar ? null : h(\n        'div',\n        barWrapper,\n        [h('div', bar)]\n      ), this.createScrollbarButton(h, 'end')]\n    );\n  },\n  data: function data() {\n    return {\n      isBarDragging: false\n    };\n  },\n\n  methods: {\n    setRailHover: function setRailHover() {\n      var parent = getRealParent(this);\n      var state = parent.vuescroll.state;\n\n      if (!state.isRailHover) {\n        state.isRailHover = true;\n        parent.showBar();\n      }\n    },\n    setRailLeave: function setRailLeave() {\n      var parent = getRealParent(this);\n      var state = parent.vuescroll.state;\n\n      state.isRailHover = false;\n      parent.hideBar();\n    },\n    setBarDrag: function setBarDrag(val) /* istanbul ignore next */{\n      this.$emit('setBarDrag', this.isBarDragging = val);\n\n      var parent = getRealParent(this);\n      // set class hook\n      parent.setClassHook(this.type == 'vertical' ? 'vBarDragging' : 'hBarDragging', !!val);\n    },\n    createBarEvent: function createBarEvent() {\n      var ctx = this;\n\n      var parent = getRealParent(ctx);\n      var touchObj = ctx.touchManager.getTouchObject();\n\n      function mousedown(e) /* istanbul ignore next */{\n        var event = ctx.touchManager.getEventObject(e);\n        if (!event) return;\n\n        e.stopImmediatePropagation();\n        e.preventDefault();\n        event = event[0];\n\n        document.onselectstart = function () {\n          return false;\n        };\n        ctx.axisStartPos = event[ctx.bar.client] - ctx.$refs['thumb'].getBoundingClientRect()[ctx.bar.posName];\n\n        // Tell parent that the mouse has been down.\n        ctx.setBarDrag(true);\n        eventCenter(document, touchObj.touchmove, mousemove);\n        eventCenter(document, touchObj.touchend, mouseup);\n      }\n\n      function mousemove(e) /* istanbul ignore next */{\n        if (!ctx.axisStartPos) {\n          return;\n        }\n\n        var event = ctx.touchManager.getEventObject(e);\n        if (!event) return;\n\n        event = event[0];\n\n        var thubmParent = ctx.$refs.thumb.parentNode;\n\n        var delta = event[ctx.bar.client] - thubmParent.getBoundingClientRect()[ctx.bar.posName];\n        delta = delta / ctx.barRatio;\n\n        var percent = (delta - ctx.axisStartPos) / thubmParent[ctx.bar.offset];\n        parent.scrollTo(defineProperty({}, ctx.bar.axis.toLowerCase(), parent.scrollPanelElm[ctx.bar.scrollSize] * percent), false);\n      }\n\n      function mouseup() /* istanbul ignore next */{\n        ctx.setBarDrag(false);\n        parent.hideBar();\n\n        document.onselectstart = null;\n        ctx.axisStartPos = 0;\n\n        eventCenter(document, touchObj.touchmove, mousemove, false, 'off');\n        eventCenter(document, touchObj.touchend, mouseup, false, 'off');\n      }\n\n      return mousedown;\n    },\n    createTrackEvent: function createTrackEvent() {\n      var ctx = this;\n\n      return function handleClickTrack(e) {\n        var parent = getRealParent(ctx);\n\n        var _ctx$bar = ctx.bar,\n            client = _ctx$bar.client,\n            offset = _ctx$bar.offset,\n            posName = _ctx$bar.posName,\n            axis = _ctx$bar.axis;\n\n        var thumb = ctx.$refs['thumb'];\n\n        e.preventDefault();\n        e.stopImmediatePropagation();\n\n        /* istanbul ignore if */\n        if (!thumb) return;\n\n        var barOffset = thumb[offset];\n        var event = ctx.touchManager.getEventObject(e)[0];\n\n        var percent = (event[client] - e.currentTarget.getBoundingClientRect()[posName] - barOffset / 2) / (e.currentTarget[offset] - barOffset);\n\n        parent.scrollTo(defineProperty({}, axis.toLowerCase(), percent * 100 + '%'));\n      };\n    },\n\n\n    // Scrollbuton relative things...\n    createScrollbarButton: function createScrollbarButton(h, type /* start or end  */) {\n      var _style3;\n\n      var barContext = this;\n\n      if (!barContext.ops.scrollButton.enable) {\n        return null;\n      }\n\n      var size = barContext.ops.rail.size;\n      var _barContext$ops$scrol = barContext.ops.scrollButton,\n          opacity = _barContext$ops$scrol.opacity,\n          background = _barContext$ops$scrol.background;\n\n      var borderColor = getRgbAColor(background, opacity);\n\n      var wrapperProps = {\n        class: ['__bar-button', '__bar-button-is-' + barContext.type + '-' + type],\n        style: (_style3 = {}, defineProperty(_style3, barContext.bar.scrollButton[type], 0), defineProperty(_style3, 'width', size), defineProperty(_style3, 'height', size), defineProperty(_style3, 'position', 'absolute'), defineProperty(_style3, 'cursor', 'pointer'), defineProperty(_style3, 'display', 'table'), _style3),\n        ref: type\n      };\n\n      var innerProps = {\n        class: '__bar-button-inner',\n        style: {\n          border: 'calc(' + size + ' / 2.5) solid transparent',\n          width: '0',\n          height: '0',\n          margin: 'auto',\n          position: 'absolute',\n          top: '0',\n          bottom: '0',\n          right: '0',\n          left: '0'\n        },\n        on: {}\n      };\n\n      if (barContext.type == 'vertical') {\n        if (type == 'start') {\n          innerProps.style['border-bottom-color'] = borderColor;\n          innerProps.style['transform'] = 'translateY(-25%)';\n        } else {\n          innerProps.style['border-top-color'] = borderColor;\n          innerProps.style['transform'] = 'translateY(25%)';\n        }\n      } else {\n        if (type == 'start') {\n          innerProps.style['border-right-color'] = borderColor;\n          innerProps.style['transform'] = 'translateX(-25%)';\n        } else {\n          innerProps.style['border-left-color'] = borderColor;\n          innerProps.style['transform'] = 'translateX(25%)';\n        }\n      }\n\n      /* istanbul ignore next */\n      {\n        var touchObj = this.touchManager.getTouchObject();\n        innerProps.on[touchObj.touchstart] = this.createScrollButtonEvent(type, touchObj);\n      }\n\n      return h(\n        'div',\n        wrapperProps,\n        [h('div', innerProps)]\n      );\n    },\n    createScrollButtonEvent: function createScrollButtonEvent(type, touchObj) {\n      var ctx = this;\n      var parent = getRealParent(ctx);\n\n      var _ctx$ops$scrollButton = ctx.ops.scrollButton,\n          step = _ctx$ops$scrollButton.step,\n          mousedownStep = _ctx$ops$scrollButton.mousedownStep;\n\n\n      var stepWithDirection = type == 'start' ? -step : step;\n      var mousedownStepWithDirection = type == 'start' ? -mousedownStep : mousedownStep;\n      var ref = requestAnimationFrame(window);\n\n      // bar props: type\n      var barType = ctx.type;\n\n      var isMouseDown = false;\n      var isMouseout = true;\n      var timeoutId = void 0;\n\n      function start(e) {\n        /* istanbul ignore if */\n\n        if (3 == e.which) {\n          return;\n        }\n\n        // set class hook\n        parent.setClassHook('cliking' + barType + type + 'Button', true);\n\n        e.stopImmediatePropagation();\n        e.preventDefault();\n\n        isMouseout = false;\n\n        parent.scrollBy(defineProperty({}, 'd' + ctx.bar.axis.toLowerCase(), stepWithDirection));\n\n        eventCenter(document, touchObj.touchend, endPress, false);\n\n        if (touchObj.touchstart == 'mousedown') {\n          var elm = ctx.$refs[type];\n          eventCenter(elm, 'mouseenter', enter, false);\n          eventCenter(elm, 'mouseleave', leave, false);\n        }\n\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(function () /* istanbul ignore next */{\n          isMouseDown = true;\n          ref(pressing, window);\n        }, 500);\n      }\n\n      function pressing() /* istanbul ignore next */{\n        if (isMouseDown && !isMouseout) {\n          parent.scrollBy(defineProperty({}, 'd' + ctx.bar.axis.toLowerCase(), mousedownStepWithDirection), false);\n          ref(pressing, window);\n        }\n      }\n\n      function endPress() {\n        clearTimeout(timeoutId);\n        isMouseDown = false;\n        eventCenter(document, touchObj.touchend, endPress, false, 'off');\n\n        if (touchObj.touchstart == 'mousedown') {\n          var elm = ctx.$refs[type];\n          eventCenter(elm, 'mouseenter', enter, false, 'off');\n          eventCenter(elm, 'mouseleave', leave, false, 'off');\n        }\n\n        parent.setClassHook('cliking' + barType + type + 'Button', false);\n      }\n\n      function enter() /* istanbul ignore next */{\n        isMouseout = false;\n        pressing();\n      }\n\n      function leave() /* istanbul ignore next */{\n        isMouseout = true;\n      }\n\n      return start;\n    }\n  }\n};\n\nfunction getBarData(vm, type) {\n  var axis = scrollMap[type].axis;\n  /** type.charAt(0) = vBar/hBar */\n  var barType = type.charAt(0) + 'Bar';\n\n  var hideBar = !vm.bar[barType].state.size || !vm.mergedOptions.scrollPanel['scrolling' + axis] || vm.refreshLoad && type !== 'vertical' || vm.mergedOptions.bar.disable;\n\n  var keepShowRail = vm.mergedOptions.rail.keepShow;\n\n  if (hideBar && !keepShowRail) {\n    return null;\n  }\n\n  return {\n    hideBar: hideBar,\n    props: {\n      type: type,\n      ops: {\n        bar: vm.mergedOptions.bar,\n        rail: vm.mergedOptions.rail,\n        scrollButton: vm.mergedOptions.scrollButton\n      },\n      state: vm.bar[barType].state,\n      hideBar: hideBar\n    },\n    on: {\n      setBarDrag: vm.setBarDrag\n    },\n    ref: type + 'Bar',\n    key: type\n  };\n}\n\n/**\n * create bars\n *\n * @param {any} size\n * @param {any} type\n */\nfunction createBar(h, vm) {\n  var verticalBarProps = getBarData(vm, 'vertical');\n  var horizontalBarProps = getBarData(vm, 'horizontal');\n\n  // set class hooks\n  vm.setClassHook('hasVBar', !!(verticalBarProps && !verticalBarProps.hideBar));\n  vm.setClassHook('hasHBar', !!(horizontalBarProps && !horizontalBarProps.hideBar));\n\n  return [verticalBarProps ? h('bar', _extends({}, verticalBarProps, {\n    props: _extends({ otherBarHide: !horizontalBarProps }, verticalBarProps.props)\n  })) : null, horizontalBarProps ? h('bar', _extends({}, horizontalBarProps, {\n    props: _extends({ otherBarHide: !verticalBarProps }, horizontalBarProps.props)\n  })) : null];\n}\n\n/**\n * This is like a HOC, It extracts the common parts of the\n * native-mode, slide-mode and mix-mode.\n * Each mode must implement the following methods:\n * 1. refreshInternalStatus : use to refresh the component\n * 2. destroy : Destroy some registryed events before component destroy.\n * 3. updateBarStateAndEmitEvent: use to update bar states and emit events.\n */\n\nvar createComponent = function createComponent(_ref) {\n  var _render = _ref.render,\n      components = _ref.components,\n      mixins = _ref.mixins;\n  return {\n    name: 'vueScroll',\n    props: {\n      ops: { type: Object }\n    },\n    components: components,\n    mixins: [api].concat(toConsumableArray([].concat(mixins))),\n    created: function created() {\n      var _this = this;\n\n      /**\n       * Begin to merge options\n       */\n\n      var _gfc = mergeObject(this.$vuescrollConfig || {}, {});\n      var ops = mergeObject(baseConfig, _gfc);\n\n      this.$options.propsData.ops = this.$options.propsData.ops || {};\n      Object.keys(this.$options.propsData.ops).forEach(function (key) {\n        {\n          defineReactive(_this.mergedOptions, key, _this.$options.propsData.ops);\n        }\n      });\n      // from ops to mergedOptions\n      mergeObject(ops, this.mergedOptions);\n\n      this._isVuescrollRoot = true;\n      this.renderError = validateOps(this.mergedOptions);\n    },\n    render: function render(h) {\n      var vm = this;\n      if (vm.renderError) {\n        return h('div', [[vm.$slots['default']]]);\n      }\n\n      if (!vm.touchManager) vm.touchManager = new touchManager();\n\n      // vuescroll data\n      var data = {\n        style: {\n          height: vm.vuescroll.state.height,\n          width: vm.vuescroll.state.width,\n          padding: 0,\n          position: 'relative',\n          overflow: 'hidden'\n        },\n        class: _extends({ __vuescroll: true }, vm.classHooks)\n      };\n\n      var touchObj = vm.touchManager.getTouchObject();\n      if (touchObj) {\n        var _data$on;\n\n        data.on = (_data$on = {}, defineProperty(_data$on, touchObj.touchenter, function () {\n          vm.vuescroll.state.pointerLeave = false;\n          vm.updateBarStateAndEmitEvent();\n\n          vm.setClassHook('mouseEnter', true);\n        }), defineProperty(_data$on, touchObj.touchleave, function () {\n          vm.vuescroll.state.pointerLeave = true;\n          vm.hideBar();\n\n          vm.setClassHook('mouseEnter', false);\n        }), defineProperty(_data$on, touchObj.touchmove, function () /* istanbul ignore next */{\n          vm.vuescroll.state.pointerLeave = false;\n          vm.updateBarStateAndEmitEvent();\n        }), _data$on);\n      }\n\n      var ch = [_render(h, vm)].concat(toConsumableArray(createBar(h, vm)));\n\n      var _customContainer = this.$slots['scroll-container'];\n      if (_customContainer) {\n        return insertChildrenIntoSlot(h, _customContainer, ch, data);\n      }\n\n      return h(\n        'div',\n        data,\n        [ch]\n      );\n    },\n    mounted: function mounted() {\n      var _this2 = this;\n\n      if (!this.renderError) {\n        this.initVariables();\n        this.initWatchOpsChange();\n        // Call external merged Api\n        this.refreshInternalStatus();\n\n        this.updatedCbs.push(function () {\n          _this2.scrollToAnchor();\n          // need to reflow to deal with the\n          // latest thing.\n          _this2.updateBarStateAndEmitEvent();\n        });\n      }\n    },\n    updated: function updated() {\n      var _this3 = this;\n\n      this.updatedCbs.forEach(function (cb) {\n        cb.call(_this3);\n      });\n      // Clear\n      this.updatedCbs = [];\n    },\n    beforeDestroy: function beforeDestroy() {\n      if (this.destroy) {\n        this.destroy();\n      }\n    },\n\n\n    /** ------------------------------- Computed ----------------------------- */\n    computed: {\n      scrollPanelElm: function scrollPanelElm() {\n        return this.$refs['scrollPanel']._isVue ? this.$refs['scrollPanel'].$el : this.$refs['scrollPanel'];\n      }\n    },\n    data: function data() {\n      return {\n        vuescroll: {\n          state: {\n            isDragging: false,\n            pointerLeave: true,\n            isRailHover: false,\n            /** Default sizeStrategies */\n            height: '100%',\n            width: '100%',\n            // current size strategy\n            currentSizeStrategy: 'percent',\n            currentScrollState: null,\n            currentScrollInfo: null\n          }\n        },\n        bar: {\n          vBar: {\n            state: {\n              posValue: 0,\n              size: 0,\n              opacity: 0\n            }\n          },\n          hBar: {\n            state: {\n              posValue: 0,\n              size: 0,\n              opacity: 0\n            }\n          }\n        },\n        mergedOptions: {\n          vuescroll: {},\n          scrollPanel: {},\n          scrollContent: {},\n          rail: {},\n          bar: {}\n        },\n        updatedCbs: [],\n        renderError: false,\n\n        classHooks: {\n          hasVBar: false,\n          hasHBar: false,\n\n          vBarVisible: false,\n          hBarVisible: false,\n\n          vBarDragging: false,\n          hBarDragging: false,\n\n          clikingVerticalStartButton: false,\n          clikingVerticalEndButton: false,\n          clikingHorizontalStartButton: false,\n          clikingHorizontalEndButton: false,\n\n          mouseEnter: false\n        }\n      };\n    },\n\n    /** ------------------------------- Methods -------------------------------- */\n    methods: {\n      /** ------------------------ Handlers --------------------------- */\n\n      scrollingComplete: function scrollingComplete() {\n        this.updateBarStateAndEmitEvent('handle-scroll-complete');\n      },\n      setBarDrag: function setBarDrag(val) {\n        /* istanbul ignore next */\n        this.vuescroll.state.isDragging = val;\n      },\n      setClassHook: function setClassHook(name, value) {\n        this.classHooks[name] = value;\n      },\n\n\n      /** ------------------------ Some Helpers --------------------------- */\n\n      /*\n       * To have a good ux, instead of hiding bar immediately, we hide bar\n       * after some seconds by using this simple debounce-hidebar method.\n       */\n      showAndDefferedHideBar: function showAndDefferedHideBar(forceHideBar) {\n        var _this4 = this;\n\n        this.showBar();\n\n        if (this.timeoutId) {\n          clearTimeout(this.timeoutId);\n          this.timeoutId = 0;\n        }\n\n        this.timeoutId = setTimeout(function () {\n          _this4.timeoutId = 0;\n          _this4.hideBar(forceHideBar);\n        }, this.mergedOptions.bar.showDelay);\n      },\n      showBar: function showBar() {\n        var opacity = this.mergedOptions.bar.opacity;\n        this.bar.vBar.state.opacity = opacity;\n        this.bar.hBar.state.opacity = opacity;\n      },\n      hideBar: function hideBar(forceHideBar) {\n        var _vuescroll$state = this.vuescroll.state,\n            isDragging = _vuescroll$state.isDragging,\n            isRailHover = _vuescroll$state.isRailHover;\n        /* istanbul ignore next */\n\n        if (isDragging || isRailHover) {\n          return;\n        }\n\n        if (forceHideBar && !this.mergedOptions.bar.keepShow) {\n          this.bar.hBar.state.opacity = 0;\n          this.bar.vBar.state.opacity = 0;\n        }\n\n        // add isDragging condition\n        // to prevent from hiding bar while dragging the bar\n        if (!this.mergedOptions.bar.keepShow && !this.vuescroll.state.isDragging) {\n          this.bar.vBar.state.opacity = 0;\n          this.bar.hBar.state.opacity = 0;\n        }\n      },\n      useNumbericSize: function useNumbericSize() {\n        this.vuescroll.state.currentSizeStrategy = 'number';\n        var _mergedOptions$scroll = this.mergedOptions.scrollPanel,\n            maxHeight = _mergedOptions$scroll.maxHeight,\n            maxWidth = _mergedOptions$scroll.maxWidth;\n        var _$el$parentNode = this.$el.parentNode,\n            parentClientHeight = _$el$parentNode.clientHeight,\n            parentClientWidth = _$el$parentNode.clientWidth;\n        var _scrollPanelElm = this.scrollPanelElm,\n            scrollHeight = _scrollPanelElm.scrollHeight,\n            scrollWidth = _scrollPanelElm.scrollWidth;\n\n        var width = void 0;\n        var height = void 0;\n\n        if (maxHeight || maxWidth) {\n          height = scrollHeight <= maxHeight ? undefined : maxHeight;\n          width = scrollWidth <= maxWidth ? undefined : maxWidth;\n        } else {\n          height = parentClientHeight;\n          width = parentClientWidth;\n        }\n\n        this.vuescroll.state.height = height ? height + 'px' : undefined;\n        this.vuescroll.state.width = width ? width + 'px' : undefined;\n      },\n      usePercentSize: function usePercentSize() {\n        this.vuescroll.state.currentSizeStrategy = 'percent';\n\n        this.vuescroll.state.height = '100%';\n        this.vuescroll.state.width = '100%';\n      },\n\n      // Set its size to be equal to its parentNode\n      setVsSize: function setVsSize() {\n        var sizeStrategy = this.mergedOptions.vuescroll.sizeStrategy;\n        var _mergedOptions$scroll2 = this.mergedOptions.scrollPanel,\n            maxHeight = _mergedOptions$scroll2.maxHeight,\n            maxWidth = _mergedOptions$scroll2.maxWidth;\n        var _scrollPanelElm2 = this.scrollPanelElm,\n            clientHeight = _scrollPanelElm2.clientHeight,\n            clientWidth = _scrollPanelElm2.clientWidth;\n\n        if (sizeStrategy == 'number' || maxHeight && clientHeight > maxHeight || maxWidth && clientWidth > maxWidth) {\n          this.useNumbericSize();\n        } else if (sizeStrategy == 'percent' && clientHeight != maxHeight && clientWidth != maxWidth) {\n          this.usePercentSize();\n        }\n      },\n\n\n      /** ------------------------ Init --------------------------- */\n      initWatchOpsChange: function initWatchOpsChange() {\n        var _this5 = this;\n\n        var watchOpts = {\n          deep: true,\n          sync: true\n        };\n        this.$watch('mergedOptions', function () {\n          setTimeout(function () {\n            if (_this5.isSmallChangeThisTick) {\n              _this5.isSmallChangeThisTick = false;\n              _this5.updateBarStateAndEmitEvent('options-change');\n              return;\n            }\n            _this5.refreshInternalStatus();\n          }, 0);\n        }, watchOpts);\n\n        /**\n         * We also watch `small` changes, and when small changes happen, we send\n         * a signal to vuescroll, to tell it:\n         * 1. we don't need to registry resize\n         * 2. we don't need to registry scroller.\n         */\n        smallChangeArray.forEach(function (opts) {\n          _this5.$watch(opts, function () {\n            _this5.isSmallChangeThisTick = true;\n          }, watchOpts);\n        });\n      },\n\n      // scrollTo hash-anchor while mounted component have mounted.\n      scrollToAnchor: function scrollToAnchor() /* istanbul ignore next */{\n        var validateHashSelector = function validateHashSelector(hash) {\n          return (/^#[a-zA-Z_]\\d*$/.test(hash)\n          );\n        };\n\n        var hash = window.location.hash;\n        if (!hash || (hash = hash.slice(hash.lastIndexOf('#'))) && !validateHashSelector(hash)) {\n          return;\n        }\n\n        var elm = document.querySelector(hash);\n        if (!isChildInParent(elm, this.$el) || this.mergedOptions.scrollPanel.initialScrollY || this.mergedOptions.scrollPanel.initialScrollX) {\n          return;\n        }\n\n        this.scrollIntoView(elm);\n      }\n\n      /** ------------------------ Registry Resize --------------------------- */\n\n    }\n  };\n};\n\n// begin importing\nvar scrollPanel = {\n  name: 'scrollPanel',\n  props: { ops: { type: Object, required: true } },\n  methods: {\n    // trigger scrollPanel options initialScrollX,\n    // initialScrollY\n    updateInitialScroll: function updateInitialScroll() {\n      var x = 0;\n      var y = 0;\n\n      var parent = getRealParent(this);\n\n      if (this.ops.initialScrollX) {\n        x = this.ops.initialScrollX;\n      }\n      if (this.ops.initialScrollY) {\n        y = this.ops.initialScrollY;\n      }\n      if (x || y) {\n        parent.scrollTo({ x: x, y: y });\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    setTimeout(function () {\n      if (!_this._isDestroyed) {\n        _this.updateInitialScroll();\n      }\n    }, 0);\n  },\n  render: function render(h) {\n    // eslint-disable-line\n    var data = {\n      class: ['__panel'],\n      style: {\n        position: 'relative',\n        boxSizing: 'border-box'\n      }\n    };\n\n    var parent = getRealParent(this);\n\n    var _customPanel = parent.$slots['scroll-panel'];\n    if (_customPanel) {\n      return insertChildrenIntoSlot(h, _customPanel, this.$slots.default, data);\n    }\n\n    return h(\n      'div',\n      data,\n      [[this.$slots.default]]\n    );\n  }\n};\n\n/**\n * Init following things\n * 1. Component\n * 2. Render\n * 3. Config\n */\nfunction _install(core, render) {\n  var _components;\n\n  var extraConfigs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var extraValidators = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n  var components = (_components = {}, defineProperty(_components, scrollPanel.name, scrollPanel), defineProperty(_components, bar.name, bar), _components);\n\n  var opts = {};\n  opts.components = components;\n  opts.render = render;\n  opts.mixins = core;\n\n  var comp = createComponent(opts);\n\n  // Init Config\n  extendOpts(extraConfigs, extraValidators);\n\n  return comp;\n}\n\n/**\n * Get the children of parent those are in viewport\n */\nfunction getCurrentViewportDom(parent, container) {\n  var children = parent.children;\n  var domFragment = [];\n\n  var isCurrentview = function isCurrentview(dom) {\n    var _dom$getBoundingClien = dom.getBoundingClientRect(),\n        left = _dom$getBoundingClien.left,\n        top = _dom$getBoundingClien.top,\n        width = _dom$getBoundingClien.width,\n        height = _dom$getBoundingClien.height;\n\n    var _container$getBoundin = container.getBoundingClientRect(),\n        parentLeft = _container$getBoundin.left,\n        parentTop = _container$getBoundin.top,\n        parentHeight = _container$getBoundin.height,\n        parentWidth = _container$getBoundin.width;\n\n    if (left - parentLeft + width > 0 && left - parentLeft < parentWidth && top - parentTop + height > 0 && top - parentTop < parentHeight) {\n      return true;\n    }\n    return false;\n  };\n\n  for (var i = 0; i < children.length; i++) {\n    var dom = children.item(i);\n    if (isCurrentview(dom) && !dom.isResizeElm) {\n      domFragment.push(dom);\n    }\n  }\n  return domFragment;\n}\n\n/**\n *  Compatible to scroller's animation function\n */\nfunction createEasingFunction(easing, easingPattern) {\n  return function (time) {\n    return easingPattern(easing, time);\n  };\n}\n\n/**\n * Calculate the easing pattern\n * @link https://github.com/cferdinandi/smooth-scroll/blob/master/src/js/smooth-scroll.js\n * modified by wangyi7099\n * @param {String} type Easing pattern\n * @param {Number} time Time animation should take to complete\n * @returns {Number}\n */\nfunction easingPattern(easing, time) {\n  var pattern = null;\n  /* istanbul ignore next */\n  {\n    // Default Easing Patterns\n    if (easing === 'easeInQuad') pattern = time * time; // accelerating from zero velocity\n    if (easing === 'easeOutQuad') pattern = time * (2 - time); // decelerating to zero velocity\n    if (easing === 'easeInOutQuad') pattern = time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time; // acceleration until halfway, then deceleration\n    if (easing === 'easeInCubic') pattern = time * time * time; // accelerating from zero velocity\n    if (easing === 'easeOutCubic') pattern = --time * time * time + 1; // decelerating to zero velocity\n    if (easing === 'easeInOutCubic') pattern = time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1; // acceleration until halfway, then deceleration\n    if (easing === 'easeInQuart') pattern = time * time * time * time; // accelerating from zero velocity\n    if (easing === 'easeOutQuart') pattern = 1 - --time * time * time * time; // decelerating to zero velocity\n    if (easing === 'easeInOutQuart') pattern = time < 0.5 ? 8 * time * time * time * time : 1 - 8 * --time * time * time * time; // acceleration until halfway, then deceleration\n    if (easing === 'easeInQuint') pattern = time * time * time * time * time; // accelerating from zero velocity\n    if (easing === 'easeOutQuint') pattern = 1 + --time * time * time * time * time; // decelerating to zero velocity\n    if (easing === 'easeInOutQuint') pattern = time < 0.5 ? 16 * time * time * time * time * time : 1 + 16 * --time * time * time * time * time; // acceleration until halfway, then deceleration\n  }\n  return pattern || time; // no easing, no acceleration\n}\n\nfunction noop() {\n  return true;\n}\n\n/* istanbul ignore next */\nvar now = Date.now || function () {\n  return new Date().getTime();\n};\n\nvar ScrollControl = function () {\n  function ScrollControl() {\n    classCallCheck(this, ScrollControl);\n\n    this.init();\n\n    this.isRunning = false;\n  }\n\n  createClass(ScrollControl, [{\n    key: 'pause',\n    value: function pause() {\n      /* istanbul ignore if */\n      if (!this.isRunning) return;\n\n      this.isPaused = true;\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      this.isStopped = true;\n    }\n  }, {\n    key: 'continue',\n    value: function _continue() {\n      /* istanbul ignore if */\n      if (!this.isPaused) return;\n\n      this.isPaused = false;\n      this.ts = now() - this.percent * this.spd;\n      this.execScroll();\n    }\n  }, {\n    key: 'startScroll',\n    value: function startScroll(st, ed, spd) {\n      var stepCb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;\n      var completeCb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : noop;\n      var vertifyCb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : noop;\n      var easingMethod = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : noop;\n\n      var df = ed - st;\n      var dir = df > 0 ? -1 : 1;\n      var nt = now();\n\n      if (!this.isRunning) {\n        this.init();\n      }\n\n      if (dir != this.dir || nt - this.ts > 200) {\n        this.ts = nt;\n\n        this.dir = dir;\n        this.st = st;\n        this.ed = ed;\n        this.df = df;\n      } /* istanbul ignore next */else {\n          this.df += df;\n        }\n\n      this.spd = spd;\n\n      this.completeCb = completeCb;\n      this.vertifyCb = vertifyCb;\n      this.stepCb = stepCb;\n      this.easingMethod = easingMethod;\n\n      if (!this.isRunning) this.execScroll();\n    }\n  }, {\n    key: 'execScroll',\n    value: function execScroll() {\n      var _this = this;\n\n      if (!this.df) return;\n\n      var percent = this.percent || 0;\n      this.percent = 0;\n      this.isRunning = true;\n\n      var loop = function loop() {\n        /* istanbul ignore if */\n        if (!_this.isRunning || !_this.vertifyCb(percent) || _this.isStopped) {\n          _this.isRunning = false;\n          return;\n        }\n\n        percent = (now() - _this.ts) / _this.spd;\n\n        if (_this.isPaused) {\n          _this.percent = percent;\n          _this.isRunning = false;\n          return;\n        }\n\n        if (percent < 1) {\n          var value = _this.st + _this.df * _this.easingMethod(percent);\n          _this.stepCb(value);\n          _this.ref(loop);\n        } else {\n          // trigger complete\n          _this.stepCb(_this.st + _this.df);\n          _this.completeCb();\n\n          _this.isRunning = false;\n        }\n      };\n\n      this.ref(loop);\n    }\n  }, {\n    key: 'init',\n    value: function init() {\n      this.st = 0;\n      this.ed = 0;\n      this.df = 0;\n      this.spd = 0;\n      this.ts = 0;\n      this.dir = 0;\n      this.ref = requestAnimationFrame(window);\n\n      this.isPaused = false;\n      this.isStopped = false;\n    }\n  }]);\n  return ScrollControl;\n}();\n\nfunction scrollTo(elm, x, y) {\n  var speed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 300;\n  var easing = arguments[4];\n  var scrollingComplete = arguments[5];\n\n  var scrollLeft = void 0,\n      scrollTop = void 0,\n      scrollHeight = void 0,\n      scrollWidth = void 0,\n      clientWidth = void 0,\n      clientHeight = void 0;\n\n  var _elm = elm,\n      nodeType = _elm.nodeType;\n\n  var scrollX = new ScrollControl();\n  var scrollY = new ScrollControl();\n\n  if (!nodeType) {\n    warn('You must pass a dom for the first param, ' + 'for window scrolling, ' + 'you can pass document as the first param.');\n\n    return;\n  }\n\n  if (nodeType == 9) {\n    // document\n    elm = elm.scrollingElement;\n  }\n\n  var _elm2 = elm;\n  scrollLeft = _elm2.scrollLeft;\n  scrollTop = _elm2.scrollTop;\n  scrollHeight = _elm2.scrollHeight;\n  scrollWidth = _elm2.scrollWidth;\n  clientWidth = _elm2.clientWidth;\n  clientHeight = _elm2.clientHeight;\n\n\n  if (typeof x === 'undefined') {\n    x = scrollLeft;\n  } else {\n    x = getNumericValue(x, scrollWidth - clientWidth);\n  }\n  if (typeof y === 'undefined') {\n    y = scrollTop;\n  } else {\n    y = getNumericValue(y, scrollHeight - clientHeight);\n  }\n\n  var easingMethod = createEasingFunction(easing, easingPattern);\n  scrollX.startScroll(scrollLeft, x, speed, function (dx) {\n    elm.scrollLeft = dx;\n  }, scrollingComplete, undefined, easingMethod);\n  scrollY.startScroll(scrollTop, y, speed, function (dy) {\n    elm.scrollTop = dy;\n  }, scrollingComplete, undefined, easingMethod);\n}\n\nvar api$1 = {\n  mounted: function mounted() {\n    // registry scroll\n    this.scrollX = new ScrollControl();\n    this.scrollY = new ScrollControl();\n  },\n\n  methods: {\n    nativeStop: function nativeStop() {\n      this.scrollX.stop();\n      this.scrollY.stop();\n    },\n    nativePause: function nativePause() {\n      this.scrollX.pause();\n      this.scrollY.pause();\n    },\n    nativeContinue: function nativeContinue() {\n      this.scrollX.continue();\n      this.scrollY.continue();\n    },\n    nativeScrollTo: function nativeScrollTo(x, y, speed, easing) {\n      if (speed === false) {\n        \n      } else if (typeof speed === 'undefined') {\n        speed = this.mergedOptions.scrollPanel.speed;\n      }\n      var elm = this.scrollPanelElm;\n      var scrollTop = elm.scrollTop,\n          scrollLeft = elm.scrollLeft,\n          scrollWidth = elm.scrollWidth,\n          clientWidth = elm.clientWidth,\n          scrollHeight = elm.scrollHeight,\n          clientHeight = elm.clientHeight;\n\n      if (typeof x === 'undefined') {\n        x = scrollLeft;\n      } else {\n        x = getNumericValue(x, scrollWidth - clientWidth);\n      }\n      if (typeof y === 'undefined') {\n        y = scrollTop;\n      } else {\n        y = getNumericValue(y, scrollHeight - clientHeight);\n      }\n\n      if (speed) {\n        easing = easing || this.mergedOptions.scrollPanel.easing;\n        var easingMethod = createEasingFunction(easing, easingPattern);\n\n        if (x != scrollLeft) {\n          this.scrollX.startScroll(scrollLeft, x, speed, function (x) {\n            elm.scrollLeft = x;\n          }, this.scrollingComplete.bind(this), undefined, easingMethod);\n        }\n\n        if (y != scrollTop) {\n          this.scrollY.startScroll(scrollTop, y, speed, function (y) {\n            elm.scrollTop = y;\n          }, this.scrollingComplete.bind(this), undefined, easingMethod);\n        }\n      } else {\n        elm.scrollTop = y;\n        elm.scrollLeft = x;\n      }\n    },\n    getCurrentviewDomNative: function getCurrentviewDomNative() {\n      var parent = this.scrollContentElm;\n      var domFragment = getCurrentViewportDom(parent, this.$el);\n      return domFragment;\n    }\n  }\n};\n\nfunction getPanelData(context) {\n  // scrollPanel data start\n  var data = {\n    ref: 'scrollPanel',\n    style: {\n      height: '100%',\n      overflowY: 'scroll',\n      overflowX: 'scroll'\n    },\n    class: [],\n    nativeOn: {\n      '&scroll': context.handleScroll\n    },\n    props: {\n      ops: context.mergedOptions.scrollPanel\n    }\n  };\n\n  context.scrollYEnable = true;\n  context.scrollXEnable = true;\n\n  data.nativeOn.DOMMouseScroll = data.nativeOn.mousewheel = context.onMouseWheel;\n\n  var _context$mergedOption = context.mergedOptions.scrollPanel,\n      scrollingY = _context$mergedOption.scrollingY,\n      scrollingX = _context$mergedOption.scrollingX;\n\n\n  if (!context.bar.hBar.state.size || !scrollingX) {\n    context.scrollXEnable = false;\n    data.style.overflowX = 'hidden';\n  }\n\n  if (!context.bar.vBar.state.size || !scrollingY) {\n    context.scrollYEnable = false;\n    data.style.overflowY = 'hidden';\n  }\n\n  var gutter = getGutter();\n  /* istanbul ignore if */\n  if (!gutter) {\n    createHideBarStyle();\n    data.class.push('__hidebar');\n    if (isIos()) {\n      data.style['-webkit-overflow-scrolling'] = 'touch';\n    }\n  } else {\n    // hide system bar by use a negative value px\n    // gutter should be 0 when manually disable scrollingX #14\n    if (context.bar.vBar.state.size && context.mergedOptions.scrollPanel.scrollingY) {\n      if (context.mergedOptions.scrollPanel.verticalNativeBarPos == 'right') {\n        data.style.marginRight = '-' + gutter + 'px';\n      } /* istanbul ignore next */else {\n          data.style.marginLeft = '-' + gutter + 'px';\n        }\n    }\n    if (context.bar.hBar.state.size && context.mergedOptions.scrollPanel.scrollingX) {\n      data.style.height = 'calc(100% + ' + gutter + 'px)';\n    }\n  }\n\n  // clear legency styles of slide mode...\n  data.style.transformOrigin = '';\n  data.style.transform = '';\n\n  return data;\n}\n\n/**\n * create a scrollPanel\n *\n * @param {any} size\n * @param {any} context\n * @returns\n */\nfunction createPanel(h, context) {\n  var data = {};\n\n  data = getPanelData(context);\n\n  return h(\n    'scrollPanel',\n    data,\n    [getPanelChildren(h, context)]\n  );\n}\n\nfunction getPanelChildren(h, context) {\n  var viewStyle = {\n    position: 'relative',\n    'box-sizing': 'border-box',\n    'min-width': '100%',\n    'min-height': '100%'\n  };\n  var data = {\n    style: viewStyle,\n    ref: 'scrollContent',\n    class: '__view'\n  };\n  var _customContent = context.$slots['scroll-content'];\n\n  if (context.mergedOptions.scrollPanel.scrollingX) {\n    viewStyle.width = getComplitableStyle('width', 'fit-content');\n  } else {\n    data.style['width'] = '100%';\n  }\n\n  if (context.mergedOptions.scrollPanel.padding) {\n    data.style.paddingRight = context.mergedOptions.rail.size;\n  }\n\n  if (_customContent) {\n    return insertChildrenIntoSlot(h, _customContent, context.$slots.default, data);\n  }\n\n  return h(\n    'div',\n    data,\n    [context.$slots.default]\n  );\n}\n\n// detect content size change\nfunction installResizeDetection(element, callback) {\n  return injectObject(element, callback);\n}\n\nfunction injectObject(element, callback) {\n  if (element.hasResized) {\n    return;\n  }\n\n  var OBJECT_STYLE = 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; padding: 0; margin: 0; opacity: 0; z-index: -1000; pointer-events: none;';\n  // define a wrap due to ie's zIndex bug\n  var objWrap = document.createElement('div');\n  objWrap.style.cssText = OBJECT_STYLE;\n  var object = document.createElement('object');\n  object.style.cssText = OBJECT_STYLE;\n  object.type = 'text/html';\n  object.tabIndex = -1;\n\n  object.onload = function () {\n    eventCenter(object.contentDocument.defaultView, 'resize', callback);\n  };\n  // https://github.com/wnr/element-resize-detector/blob/aafe9f7ea11d1eebdab722c7c5b86634e734b9b8/src/detection-strategy/object.js#L159\n  if (!isIE()) {\n    object.data = 'about:blank';\n  }\n  objWrap.isResizeElm = true;\n  objWrap.appendChild(object);\n  element.appendChild(objWrap);\n  if (isIE()) {\n    object.data = 'about:blank';\n  }\n  return function destroy() {\n    if (object.contentDocument) {\n      eventCenter(object.contentDocument.defaultView, 'resize', callback, 'off');\n    }\n    element.removeChild(objWrap);\n    element.hasResized = false;\n  };\n}\n\n/**\n * These mixes is exclusive for native mode\n */\n\nvar update = {\n  methods: {\n    updateNativeModeBarState: function updateNativeModeBarState() {\n      var container = this.scrollPanelElm;\n      var isPercent = this.vuescroll.state.currentSizeStrategy == 'percent';\n      var _vuescroll$state = this.vuescroll.state,\n          width = _vuescroll$state.width,\n          height = _vuescroll$state.height;\n\n      var clientWidth = isPercent || !width ? container.clientWidth : width.slice(0, -2); // xxxpx ==> xxx\n      var clientHeight = isPercent || !height ? container.clientHeight : height.slice(0, -2);\n\n      var heightPercentage = clientHeight / container.scrollHeight;\n      var widthPercentage = clientWidth / container.scrollWidth;\n\n      this.bar.vBar.state.posValue = container.scrollTop * 100 / clientHeight;\n      this.bar.hBar.state.posValue = container.scrollLeft * 100 / clientWidth;\n\n      this.bar.vBar.state.size = heightPercentage < 1 ? heightPercentage : 0;\n      this.bar.hBar.state.size = widthPercentage < 1 ? widthPercentage : 0;\n    },\n    getNativePosition: function getNativePosition() {\n      return {\n        scrollTop: this.scrollPanelElm.scrollTop,\n        scrollLeft: this.scrollPanelElm.scrollLeft\n      };\n    },\n    css: function css(dom, style) /* istanbul ignore next */{\n      return window.getComputedStyle(dom)[style];\n    },\n    checkScrollable: function checkScrollable(e, deltaX, deltaY) /* istanbul ignore next */{\n      var scrollable = false;\n\n      // check mouse point scrollable.\n      var dom = e.target ? e.target : e;\n      while (dom && dom.nodeType == 1 && dom !== this.scrollPanelElm.parentNode && !/^BODY|HTML/.test(dom.nodeName)) {\n        var ov = this.css(dom, 'overflow') || '';\n        if (/scroll|auto/.test(ov)) {\n          var _getScrollProcess = this.getScrollProcess(dom),\n              v = _getScrollProcess.v,\n              h = _getScrollProcess.h;\n\n          var isScrollX = this.css(dom, 'overflowX') !== 'hidden';\n          var isScrollY = this.css(dom, 'overflowY') !== 'hidden';\n          if (isScrollX && (deltaX < 0 && h > 0 || deltaX > 0 && h < 1) || isScrollY && (deltaY < 0 && v > 0 || deltaY > 0 && v < 1)) {\n            scrollable = dom == this.scrollPanelElm;\n            break;\n          }\n        }\n        dom = dom.parentNode ? dom.parentNode : false;\n      }\n\n      return scrollable;\n    },\n    onMouseWheel: function onMouseWheel(event) /* istanbul ignore next */{\n      var _mergedOptions$vuescr = this.mergedOptions.vuescroll,\n          isReverse = _mergedOptions$vuescr.wheelDirectionReverse,\n          duration = _mergedOptions$vuescr.wheelScrollDuration,\n          checkShiftKey = _mergedOptions$vuescr.checkShiftKey,\n          locking = _mergedOptions$vuescr.locking;\n\n\n      var deltaX = void 0;\n      var deltaY = void 0;\n      if (event.wheelDelta) {\n        if (event.deltaY || event.deltaX) {\n          deltaX = event.deltaX;\n          deltaY = event.deltaY;\n          if (locking) {\n            if (Math.abs(event.deltaX) > Math.abs(event.deltaY)) {\n              deltaY = 0;\n            } else {\n              deltaX = 0;\n            }\n          }\n        } else {\n          deltaX = 0;\n          deltaY = -1 * event.wheelDelta / 2;\n        }\n      } else if (event.detail) {\n        deltaY = deltaX = event.detail * 16;\n        // horizontal scroll\n        if (event.axis == 1) {\n          deltaY = 0;\n        } else if (event.axis == 2) {\n          // vertical scroll\n          deltaX = 0;\n        }\n      }\n\n      if (checkShiftKey && event.shiftKey) {\n        // swap value\n        deltaX ^= deltaY;\n        deltaY ^= deltaX;\n        deltaX ^= deltaY;\n      }\n\n      if (isReverse) {\n        deltaX ^= deltaY;\n        deltaY ^= deltaX;\n        deltaX ^= deltaY;\n      }\n\n      if (this.checkScrollable(event, deltaX, deltaY)) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.scrollBy({ dx: deltaX, dy: deltaY }, duration);\n      }\n    }\n  },\n  computed: {\n    scrollContentElm: function scrollContentElm() {\n      return this.$refs['scrollContent']._isVue ? this.$refs['scrollContent'].$el : this.$refs['scrollContent'];\n    }\n  }\n};\n\nvar mixins = [api$1, update];\n\nvar core = {\n  mixins: mixins,\n  methods: {\n    destroy: function destroy() {\n      /* istanbul ignore next */\n      if (this.destroyResize) {\n        this.destroyResize();\n      }\n    },\n    getCurrentviewDom: function getCurrentviewDom() {\n      return this.getCurrentviewDomNative();\n    },\n    internalScrollTo: function internalScrollTo(destX, destY, animate, easing) {\n      this.nativeScrollTo(destX, destY, animate, easing);\n    },\n    internalStop: function internalStop() {\n      this.nativeStop();\n    },\n    internalPause: function internalPause() {\n      this.nativePause();\n    },\n    internalContinue: function internalContinue() {\n      this.nativeContinue();\n    },\n    handleScroll: function handleScroll(nativeEvent) {\n      this.updateBarStateAndEmitEvent('handle-scroll', nativeEvent);\n    },\n    updateBarStateAndEmitEvent: function updateBarStateAndEmitEvent(eventType) {\n      var nativeEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      this.updateNativeModeBarState();\n      if (eventType) {\n        this.emitEvent(eventType, nativeEvent);\n      }\n      if (this.mergedOptions.bar.onlyShowBarOnScroll) {\n        if (eventType == 'handle-scroll' || eventType == 'handle-resize' || eventType == 'refresh-status' || eventType == 'window-resize' || eventType == 'options-change') {\n          this.showAndDefferedHideBar(true /* forceHideBar: true */);\n        }\n      } else {\n        this.showAndDefferedHideBar();\n      }\n    },\n    getScrollProcess: function getScrollProcess(elm) {\n      var _ref = elm || this.scrollPanelElm,\n          scrollHeight = _ref.scrollHeight,\n          scrollWidth = _ref.scrollWidth,\n          clientHeight = _ref.clientHeight,\n          clientWidth = _ref.clientWidth,\n          scrollTop = _ref.scrollTop,\n          scrollLeft = _ref.scrollLeft;\n\n      var v = Math.min(scrollTop / (scrollHeight - clientHeight || 1), 1);\n      var h = Math.min(scrollLeft / (scrollWidth - clientWidth || 1), 1);\n\n      return {\n        v: v,\n        h: h\n      };\n    },\n    emitEvent: function emitEvent(eventType) {\n      var nativeEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var _scrollPanelElm = this.scrollPanelElm,\n          scrollTop = _scrollPanelElm.scrollTop,\n          scrollLeft = _scrollPanelElm.scrollLeft;\n\n\n      var vertical = {\n        type: 'vertical'\n      };\n      var horizontal = {\n        type: 'horizontal'\n      };\n\n      var _getScrollProcess = this.getScrollProcess(),\n          v = _getScrollProcess.v,\n          h = _getScrollProcess.h;\n\n      vertical.process = v;\n      horizontal.process = h;\n\n      vertical['barSize'] = this.bar.vBar.state.size;\n      horizontal['barSize'] = this.bar.hBar.state.size;\n      vertical['scrollTop'] = scrollTop;\n      horizontal['scrollLeft'] = scrollLeft;\n\n      this.$emit(eventType, vertical, horizontal, nativeEvent);\n    },\n    initVariables: function initVariables() {\n      this.$el._isVuescroll = true;\n    },\n    refreshInternalStatus: function refreshInternalStatus() {\n      // 1.set vuescroll height or width according to\n      // sizeStrategy\n      this.setVsSize();\n      // 2. registry resize event\n      this.registryResize();\n      // 3. update scrollbar's height/width\n      this.updateBarStateAndEmitEvent('refresh-status');\n    },\n    registryResize: function registryResize() {\n      var _this = this;\n\n      var resizeEnable = this.mergedOptions.vuescroll.detectResize;\n\n      /* istanbul ignore next */\n      if (this.destroyResize && resizeEnable) {\n        return;\n      }\n\n      if (this.destroyResize) {\n        this.destroyResize();\n      }\n\n      if (!resizeEnable) {\n        return;\n      }\n\n      var contentElm = this.scrollContentElm;\n\n      var vm = this;\n      var handleWindowResize = function handleWindowResize() /* istanbul ignore next */{\n        vm.updateBarStateAndEmitEvent('window-resize');\n      };\n      var handleDomResize = function handleDomResize() {\n        var currentSize = {};\n        currentSize['width'] = _this.scrollPanelElm.scrollWidth;\n        currentSize['height'] = _this.scrollPanelElm.scrollHeight;\n        _this.updateBarStateAndEmitEvent('handle-resize', currentSize);\n\n        // Since content sie changes, we should tell parent to set\n        // correct size to fit content's size\n        _this.setVsSize();\n      };\n      window.addEventListener('resize', handleWindowResize, false);\n\n      var destroyDomResize = installResizeDetection(contentElm, handleDomResize);\n\n      var destroyWindowResize = function destroyWindowResize() {\n        window.removeEventListener('resize', handleWindowResize, false);\n      };\n\n      this.destroyResize = function () {\n        destroyWindowResize();\n        destroyDomResize();\n\n        _this.destroyResize = null;\n      };\n    },\n    getPosition: function getPosition() {\n      return this.getNativePosition();\n    }\n  }\n};\n\nvar config = {\n  vuescroll: {\n    wheelScrollDuration: 0,\n    wheelDirectionReverse: false,\n    checkShiftKey: true\n  }\n};\n\nvar component = _install(core, createPanel, [config]);\n\nfunction install(Vue$$1) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  Vue$$1.component(opts.name || component.name, component);\n  Vue$$1.prototype.$vuescrollConfig = opts.ops || {};\n}\n\nvar Vuescroll = _extends({\n  install: install,\n  version: '4.17.3',\n  refreshAll: refreshAll,\n  scrollTo: scrollTo\n}, component);\n\n/* istanbul ignore if */\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(Vuescroll);\n}\n\nreturn Vuescroll;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5680\n")},629:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Se\": function() { return /* binding */ mapGetters; }\n/* harmony export */ });\n/* unused harmony exports Store, createLogger, createNamespacedHelpers, install, mapActions, mapMutations, mapState */\n/*!\n * vuex v3.6.2\n * (c) 2021 Evan You\n * @license MIT\n */\nfunction applyMixin (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n}\n\nvar target = typeof window !== 'undefined'\n  ? window\n  : typeof __webpack_require__.g !== 'undefined'\n    ? __webpack_require__.g\n    : {};\nvar devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  }, { prepend: true });\n\n  store.subscribeAction(function (action, state) {\n    devtoolHook.emit('vuex:action', action, state);\n  }, { prepend: true });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\nfunction find (list, f) {\n  return list.filter(f)[0]\n}\n\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\nfunction deepCopy (obj, cache) {\n  if ( cache === void 0 ) cache = [];\n\n  // just return if obj is immutable value\n  if (obj === null || typeof obj !== 'object') {\n    return obj\n  }\n\n  // if obj is hit, it is in circular structure\n  var hit = find(cache, function (c) { return c.original === obj; });\n  if (hit) {\n    return hit.copy\n  }\n\n  var copy = Array.isArray(obj) ? [] : {};\n  // put the copy into cache at first\n  // because we want to refer it in recursive deepCopy\n  cache.push({\n    original: obj,\n    copy: copy\n  });\n\n  Object.keys(obj).forEach(function (key) {\n    copy[key] = deepCopy(obj[key], cache);\n  });\n\n  return copy\n}\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nfunction partial (fn, arg) {\n  return function () {\n    return fn(arg)\n  }\n}\n\n// Base data struct for store's module, package with some attribute and method\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  // Store some children item\n  this._children = Object.create(null);\n  // Store the origin module object which passed by programmer\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n\n  // Store the origin module's state\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors = { namespaced: { configurable: true } };\n\nprototypeAccessors.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.hasChild = function hasChild (key) {\n  return key in this._children\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if ((false)) {}\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  var child = parent.getChild(key);\n\n  if (!child) {\n    if ((false)) {}\n    return\n  }\n\n  if (!child.runtime) {\n    return\n  }\n\n  parent.removeChild(key);\n};\n\nModuleCollection.prototype.isRegistered = function isRegistered (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n\n  if (parent) {\n    return parent.hasChild(key)\n  }\n\n  return false\n};\n\nfunction update (path, targetModule, newModule) {\n  if ((false)) {}\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if ((false)) {}\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if ((false)) {}\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n  this._makeLocalGettersCache = Object.create(null);\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  var state = this._modules.root.state;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;\n  if (useDevtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors$1 = { state: { configurable: true } };\n\nprototypeAccessors$1.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors$1.state.set = function (v) {\n  if ((false)) {}\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if ((false)) {}\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n\n  this._subscribers\n    .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe\n    .forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n    false\n  ) {}\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if ((false)) {}\n    return\n  }\n\n  try {\n    this._actionSubscribers\n      .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe\n      .filter(function (sub) { return sub.before; })\n      .forEach(function (sub) { return sub.before(action, this$1.state); });\n  } catch (e) {\n    if ((false)) {}\n  }\n\n  var result = entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload);\n\n  return new Promise(function (resolve, reject) {\n    result.then(function (res) {\n      try {\n        this$1._actionSubscribers\n          .filter(function (sub) { return sub.after; })\n          .forEach(function (sub) { return sub.after(action, this$1.state); });\n      } catch (e) {\n        if ((false)) {}\n      }\n      resolve(res);\n    }, function (error) {\n      try {\n        this$1._actionSubscribers\n          .filter(function (sub) { return sub.error; })\n          .forEach(function (sub) { return sub.error(action, this$1.state, error); });\n      } catch (e) {\n        if ((false)) {}\n      }\n      reject(error);\n    });\n  })\n};\n\nStore.prototype.subscribe = function subscribe (fn, options) {\n  return genericSubscribe(fn, this._subscribers, options)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn, options) {\n  var subs = typeof fn === 'function' ? { before: fn } : fn;\n  return genericSubscribe(subs, this._actionSubscribers, options)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if ((false)) {}\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if ((false)) {}\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if ((false)) {}\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hasModule = function hasModule (path) {\n  if (typeof path === 'string') { path = [path]; }\n\n  if ((false)) {}\n\n  return this._modules.isRegistered(path)\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors$1 );\n\nfunction genericSubscribe (fn, subs, options) {\n  if (subs.indexOf(fn) < 0) {\n    options && options.prepend\n      ? subs.unshift(fn)\n      : subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  // reset local getters cache\n  store._makeLocalGettersCache = Object.create(null);\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    // direct inline function use will lead to closure preserving oldVm.\n    // using partial to return function with only arguments preserved in closure environment.\n    computed[key] = partial(fn, store);\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    if (store._modulesNamespaceMap[namespace] && (\"production\" !== 'production')) {\n      console.error((\"[vuex] duplicate namespace \" + namespace + \" for the namespaced module \" + (path.join('/'))));\n    }\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      if ((false)) {}\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (false) {}\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (false) {}\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  if (!store._makeLocalGettersCache[namespace]) {\n    var gettersProxy = {};\n    var splitPos = namespace.length;\n    Object.keys(store.getters).forEach(function (type) {\n      // skip if the target getter is not match this namespace\n      if (type.slice(0, splitPos) !== namespace) { return }\n\n      // extract local getter type\n      var localType = type.slice(splitPos);\n\n      // Add a port to the getters proxy.\n      // Define as getter property because\n      // we do not want to evaluate the getters in this time.\n      Object.defineProperty(gettersProxy, localType, {\n        get: function () { return store.getters[type]; },\n        enumerable: true\n      });\n    });\n    store._makeLocalGettersCache[namespace] = gettersProxy;\n  }\n\n  return store._makeLocalGettersCache[namespace]\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if ((false)) {}\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if ((false)) {}\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.reduce(function (state, key) { return state[key]; }, state)\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if ((false)) {}\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if ((false)) {}\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\n/**\n * Reduce the code which written in Vue.js for getting the state.\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.\n * @param {Object}\n */\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  if (false) {}\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for committing the mutation\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.\n * @return {Object}\n */\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  if (false) {}\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      // Get the commit method from store\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for getting the getters\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} getters\n * @return {Object}\n */\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  if (false) {}\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    // The namespace has been mutated by normalizeNamespace\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if (false) {}\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for dispatch the action\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.\n * @return {Object}\n */\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  if (false) {}\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      // get dispatch function from store\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\n/**\n * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object\n * @param {String} namespace\n * @return {Object}\n */\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\n/**\n * Normalize the map\n * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]\n * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]\n * @param {Array|Object} map\n * @return {Object}\n */\nfunction normalizeMap (map) {\n  if (!isValidMap(map)) {\n    return []\n  }\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\n/**\n * Validate whether given map is valid or not\n * @param {*} map\n * @return {Boolean}\n */\nfunction isValidMap (map) {\n  return Array.isArray(map) || isObject(map)\n}\n\n/**\n * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.\n * @param {Function} fn\n * @return {Function}\n */\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\n/**\n * Search a special module from store by namespace. if module not exist, print error message.\n * @param {Object} store\n * @param {String} helper\n * @param {String} namespace\n * @return {Object}\n */\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if (false) {}\n  return module\n}\n\n// Credits: borrowed code from fcomb/redux-logger\n\nfunction createLogger (ref) {\n  if ( ref === void 0 ) ref = {};\n  var collapsed = ref.collapsed; if ( collapsed === void 0 ) collapsed = true;\n  var filter = ref.filter; if ( filter === void 0 ) filter = function (mutation, stateBefore, stateAfter) { return true; };\n  var transformer = ref.transformer; if ( transformer === void 0 ) transformer = function (state) { return state; };\n  var mutationTransformer = ref.mutationTransformer; if ( mutationTransformer === void 0 ) mutationTransformer = function (mut) { return mut; };\n  var actionFilter = ref.actionFilter; if ( actionFilter === void 0 ) actionFilter = function (action, state) { return true; };\n  var actionTransformer = ref.actionTransformer; if ( actionTransformer === void 0 ) actionTransformer = function (act) { return act; };\n  var logMutations = ref.logMutations; if ( logMutations === void 0 ) logMutations = true;\n  var logActions = ref.logActions; if ( logActions === void 0 ) logActions = true;\n  var logger = ref.logger; if ( logger === void 0 ) logger = console;\n\n  return function (store) {\n    var prevState = deepCopy(store.state);\n\n    if (typeof logger === 'undefined') {\n      return\n    }\n\n    if (logMutations) {\n      store.subscribe(function (mutation, state) {\n        var nextState = deepCopy(state);\n\n        if (filter(mutation, prevState, nextState)) {\n          var formattedTime = getFormattedTime();\n          var formattedMutation = mutationTransformer(mutation);\n          var message = \"mutation \" + (mutation.type) + formattedTime;\n\n          startMessage(logger, message, collapsed);\n          logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));\n          logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);\n          logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));\n          endMessage(logger);\n        }\n\n        prevState = nextState;\n      });\n    }\n\n    if (logActions) {\n      store.subscribeAction(function (action, state) {\n        if (actionFilter(action, state)) {\n          var formattedTime = getFormattedTime();\n          var formattedAction = actionTransformer(action);\n          var message = \"action \" + (action.type) + formattedTime;\n\n          startMessage(logger, message, collapsed);\n          logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);\n          endMessage(logger);\n        }\n      });\n    }\n  }\n}\n\nfunction startMessage (logger, message, collapsed) {\n  var startMessage = collapsed\n    ? logger.groupCollapsed\n    : logger.group;\n\n  // render\n  try {\n    startMessage.call(logger, message);\n  } catch (e) {\n    logger.log(message);\n  }\n}\n\nfunction endMessage (logger) {\n  try {\n    logger.groupEnd();\n  } catch (e) {\n    logger.log('—— log end ——');\n  }\n}\n\nfunction getFormattedTime () {\n  var time = new Date();\n  return (\" @ \" + (pad(time.getHours(), 2)) + \":\" + (pad(time.getMinutes(), 2)) + \":\" + (pad(time.getSeconds(), 2)) + \".\" + (pad(time.getMilliseconds(), 3)))\n}\n\nfunction repeat (str, times) {\n  return (new Array(times + 1)).join(str)\n}\n\nfunction pad (num, maxLength) {\n  return repeat('0', maxLength - num.toString().length) + num\n}\n\nvar index = {\n  Store: Store,\n  install: install,\n  version: '3.6.2',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers,\n  createLogger: createLogger\n};\n\n/* harmony default export */ __webpack_exports__[\"ZP\"] = (index);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///629\n")}}]);